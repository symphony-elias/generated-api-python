# coding: utf-8

"""
    Login API

    For bots and other on-premise processes to authenticate. Once authenticated, the bot will be able to use the methods described in serviceAPI.yaml and agentAPI.yaml.  Authentication requests will expect the user to pass a token containing user identification information and signed by the user's private key  There will be two implementations of this API, one on your Pod and one on the Key Manager. In order to fully authenticate, an API client will have to call both of these implementations and pass both of the session tokens returned as headers in all subsequent requests to the Symphony API.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client_urllib.configuration import Configuration


class ExtensionAppTokens(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_id': 'str',
        'app_token': 'str',
        'symphony_token': 'str',
        'expire_at': 'int'
    }

    attribute_map = {
        'app_id': 'appId',
        'app_token': 'appToken',
        'symphony_token': 'symphonyToken',
        'expire_at': 'expireAt'
    }

    def __init__(self, app_id=None, app_token=None, symphony_token=None, expire_at=None, local_vars_configuration=None):  # noqa: E501
        """ExtensionAppTokens - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_id = None
        self._app_token = None
        self._symphony_token = None
        self._expire_at = None
        self.discriminator = None

        if app_id is not None:
            self.app_id = app_id
        if app_token is not None:
            self.app_token = app_token
        if symphony_token is not None:
            self.symphony_token = symphony_token
        if expire_at is not None:
            self.expire_at = expire_at

    @property
    def app_id(self):
        """Gets the app_id of this ExtensionAppTokens.  # noqa: E501

        Application ID  # noqa: E501

        :return: The app_id of this ExtensionAppTokens.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ExtensionAppTokens.

        Application ID  # noqa: E501

        :param app_id: The app_id of this ExtensionAppTokens.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_token(self):
        """Gets the app_token of this ExtensionAppTokens.  # noqa: E501

        This token generated by the application when calling authentication endpoint   # noqa: E501

        :return: The app_token of this ExtensionAppTokens.  # noqa: E501
        :rtype: str
        """
        return self._app_token

    @app_token.setter
    def app_token(self, app_token):
        """Sets the app_token of this ExtensionAppTokens.

        This token generated by the application when calling authentication endpoint   # noqa: E501

        :param app_token: The app_token of this ExtensionAppTokens.  # noqa: E501
        :type: str
        """

        self._app_token = app_token

    @property
    def symphony_token(self):
        """Gets the symphony_token of this ExtensionAppTokens.  # noqa: E501

        This token generated by Symphony and should be used by the application to verify that it's talking to Symphony.   # noqa: E501

        :return: The symphony_token of this ExtensionAppTokens.  # noqa: E501
        :rtype: str
        """
        return self._symphony_token

    @symphony_token.setter
    def symphony_token(self, symphony_token):
        """Sets the symphony_token of this ExtensionAppTokens.

        This token generated by Symphony and should be used by the application to verify that it's talking to Symphony.   # noqa: E501

        :param symphony_token: The symphony_token of this ExtensionAppTokens.  # noqa: E501
        :type: str
        """

        self._symphony_token = symphony_token

    @property
    def expire_at(self):
        """Gets the expire_at of this ExtensionAppTokens.  # noqa: E501

        unix timestamp when the token expired  # noqa: E501

        :return: The expire_at of this ExtensionAppTokens.  # noqa: E501
        :rtype: int
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this ExtensionAppTokens.

        unix timestamp when the token expired  # noqa: E501

        :param expire_at: The expire_at of this ExtensionAppTokens.  # noqa: E501
        :type: int
        """

        self._expire_at = expire_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionAppTokens):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtensionAppTokens):
            return True

        return self.to_dict() != other.to_dict()

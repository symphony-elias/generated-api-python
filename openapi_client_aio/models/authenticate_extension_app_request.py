# coding: utf-8

"""
    Login API

    For bots and other on-premise processes to authenticate. Once authenticated, the bot will be able to use the methods described in serviceAPI.yaml and agentAPI.yaml.  Authentication requests will expect the user to pass a token containing user identification information and signed by the user's private key  There will be two implementations of this API, one on your Pod and one on the Key Manager. In order to fully authenticate, an API client will have to call both of these implementations and pass both of the session tokens returned as headers in all subsequent requests to the Symphony API.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client_aio.configuration import Configuration


class AuthenticateExtensionAppRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_token': 'str',
        'auth_token': 'str'
    }

    attribute_map = {
        'app_token': 'appToken',
        'auth_token': 'authToken'
    }

    def __init__(self, app_token=None, auth_token=None, local_vars_configuration=None):  # noqa: E501
        """AuthenticateExtensionAppRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_token = None
        self._auth_token = None
        self.discriminator = None

        if app_token is not None:
            self.app_token = app_token
        if auth_token is not None:
            self.auth_token = auth_token

    @property
    def app_token(self):
        """Gets the app_token of this AuthenticateExtensionAppRequest.  # noqa: E501

        application generated token  # noqa: E501

        :return: The app_token of this AuthenticateExtensionAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_token

    @app_token.setter
    def app_token(self, app_token):
        """Sets the app_token of this AuthenticateExtensionAppRequest.

        application generated token  # noqa: E501

        :param app_token: The app_token of this AuthenticateExtensionAppRequest.  # noqa: E501
        :type: str
        """

        self._app_token = app_token

    @property
    def auth_token(self):
        """Gets the auth_token of this AuthenticateExtensionAppRequest.  # noqa: E501

        a JWT containing the caller's username and an expiration date, signed by the caller's private key.  # noqa: E501

        :return: The auth_token of this AuthenticateExtensionAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this AuthenticateExtensionAppRequest.

        a JWT containing the caller's username and an expiration date, signed by the caller's private key.  # noqa: E501

        :param auth_token: The auth_token of this AuthenticateExtensionAppRequest.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticateExtensionAppRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticateExtensionAppRequest):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DatafeedApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_datafeed(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Create a new real time messages / events stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the Real Time Events list. (see definition on top of the file)  Returns the ID of the datafeed that has just been created. This ID should then be used as input to the Read Messages/Events Stream v4 endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datafeed(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V5Datafeed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_datafeed_with_http_info(session_token, key_manager_token, **kwargs)  # noqa: E501

    def create_datafeed_with_http_info(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Create a new real time messages / events stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the Real Time Events list. (see definition on top of the file)  Returns the ID of the datafeed that has just been created. This ID should then be used as input to the Read Messages/Events Stream v4 endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datafeed_with_http_info(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V5Datafeed, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datafeed" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `create_datafeed`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `create_datafeed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/datafeeds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V5Datafeed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_datafeed(self, datafeed_id, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Delete the specified real time message / event stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the Real Time Events list. (see definition on top of the file)  Delete the specified datafeed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datafeed(datafeed_id, session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str datafeed_id: ID of the datafeed (required)
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V2Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_datafeed_with_http_info(datafeed_id, session_token, key_manager_token, **kwargs)  # noqa: E501

    def delete_datafeed_with_http_info(self, datafeed_id, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Delete the specified real time message / event stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the Real Time Events list. (see definition on top of the file)  Delete the specified datafeed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datafeed_with_http_info(datafeed_id, session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str datafeed_id: ID of the datafeed (required)
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V2Error, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'datafeed_id',
            'session_token',
            'key_manager_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_datafeed" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'datafeed_id' is set
        if self.api_client.client_side_validation and ('datafeed_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['datafeed_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `datafeed_id` when calling `delete_datafeed`")  # noqa: E501
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `delete_datafeed`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `delete_datafeed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datafeed_id' in local_var_params:
            path_params['datafeedId'] = local_var_params['datafeed_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/datafeeds/{datafeedId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2Error',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_datafeed(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Read list of real time messages / events stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the [Real Time Events](./docs/real-time-events.md) list.  Returns the list of the datafeeds for the user. Any datafeed ID of the list can then be used as input to the Read Messages/Events Stream v4 endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_datafeed(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[V5Datafeed]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_datafeed_with_http_info(session_token, key_manager_token, **kwargs)  # noqa: E501

    def list_datafeed_with_http_info(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Read list of real time messages / events stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the [Real Time Events](./docs/real-time-events.md) list.  Returns the list of the datafeeds for the user. Any datafeed ID of the list can then be used as input to the Read Messages/Events Stream v4 endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_datafeed_with_http_info(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[V5Datafeed], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_datafeed" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `list_datafeed`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `list_datafeed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '200 OK'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/datafeeds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V5Datafeed]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_datafeed(self, datafeed_id, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Read the specified real time message / event stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the Real Time Events list. (see definition on top of the file)  Read the specified datafeed.  The ackId sent as parameter can be empty for the first call. In the response an ackId will be sent back and it can be used for the next call: in this way you acknowledge that you have received the events that came with that ackId; datafeed will remove the events associated with that ackId from your queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_datafeed(datafeed_id, session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str datafeed_id: ID of the datafeed (required)
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param AckId ack_id: ackId received from last POST Base64 encoded.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V5EventList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.read_datafeed_with_http_info(datafeed_id, session_token, key_manager_token, **kwargs)  # noqa: E501

    def read_datafeed_with_http_info(self, datafeed_id, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Read the specified real time message / event stream (\"datafeed\").  # noqa: E501

        _Available on Agent 2.57.0 and above._  The datafeed provides messages and events from all conversations that the user is in. The types of events surfaced in the datafeed can be found in the Real Time Events list. (see definition on top of the file)  Read the specified datafeed.  The ackId sent as parameter can be empty for the first call. In the response an ackId will be sent back and it can be used for the next call: in this way you acknowledge that you have received the events that came with that ackId; datafeed will remove the events associated with that ackId from your queue   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_datafeed_with_http_info(datafeed_id, session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str datafeed_id: ID of the datafeed (required)
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param AckId ack_id: ackId received from last POST Base64 encoded.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V5EventList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'datafeed_id',
            'session_token',
            'key_manager_token',
            'ack_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_datafeed" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'datafeed_id' is set
        if self.api_client.client_side_validation and ('datafeed_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['datafeed_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `datafeed_id` when calling `read_datafeed`")  # noqa: E501
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `read_datafeed`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `read_datafeed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'datafeed_id' in local_var_params:
            path_params['datafeedId'] = local_var_params['datafeed_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ack_id' in local_var_params:
            body_params = local_var_params['ack_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v5/datafeeds/{datafeedId}/read', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V5EventList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_datafeed_create_post(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Create a new real time message event stream.  # noqa: E501

        A datafeed provides the messages in all conversations that a user is in. This also includes system messages like new users joining a chatroom.  A datafeed will expire if it isn't read before its capacity is reached.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_datafeed_create_post(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Datafeed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_datafeed_create_post_with_http_info(session_token, key_manager_token, **kwargs)  # noqa: E501

    def v4_datafeed_create_post_with_http_info(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Create a new real time message event stream.  # noqa: E501

        A datafeed provides the messages in all conversations that a user is in. This also includes system messages like new users joining a chatroom.  A datafeed will expire if it isn't read before its capacity is reached.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_datafeed_create_post_with_http_info(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Datafeed, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_datafeed_create_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v4_datafeed_create_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v4_datafeed_create_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/datafeed/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datafeed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_datafeed_id_read_get(self, id, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Read a given datafeed.  # noqa: E501

        Read messages from the given datafeed. If no more messages are available then this method will block. It is intended that the client should re-call this method as soon as it has processed the messages received in the previous call. If the client is able to consume messages more quickly than they become available then each call will initially block, there is no need to delay before re-calling this method.  A datafeed will expire if its unread capacity is reached. A datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_datafeed_id_read_get(id, session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Datafeed ID  (required)
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int limit: Max No. of messages to return. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[V4Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v4_datafeed_id_read_get_with_http_info(id, session_token, key_manager_token, **kwargs)  # noqa: E501

    def v4_datafeed_id_read_get_with_http_info(self, id, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Read a given datafeed.  # noqa: E501

        Read messages from the given datafeed. If no more messages are available then this method will block. It is intended that the client should re-call this method as soon as it has processed the messages received in the previous call. If the client is able to consume messages more quickly than they become available then each call will initially block, there is no need to delay before re-calling this method.  A datafeed will expire if its unread capacity is reached. A datafeed can only be consumed by one client thread at a time. E.g. polling the datafeed by two threads may lead to messages being delivered out of order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v4_datafeed_id_read_get_with_http_info(id, session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: Datafeed ID  (required)
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int limit: Max No. of messages to return. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[V4Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'session_token',
            'key_manager_token',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_datafeed_id_read_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `v4_datafeed_id_read_get`")  # noqa: E501
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v4_datafeed_id_read_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v4_datafeed_id_read_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v4/datafeed/{id}/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V4Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

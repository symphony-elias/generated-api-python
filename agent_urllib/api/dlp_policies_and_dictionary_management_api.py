# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DLPPoliciesAndDictionaryManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_dlp_dictionaries_dict_id_data_download_get(self, session_token, key_manager_token, dict_id, **kwargs):  # noqa: E501
        """Downloads Base 64 encoded dictionary content.  # noqa: E501

        Downloads Base 64 encoded dictionary content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_data_download_get(session_token, key_manager_token, dict_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param str dict_version: If set to be valid dictionary version number, will return dictionary with specified version. Otherwise, return the latest dictionary. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_dict_id_data_download_get_with_http_info(session_token, key_manager_token, dict_id, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_dict_id_data_download_get_with_http_info(self, session_token, key_manager_token, dict_id, **kwargs):  # noqa: E501
        """Downloads Base 64 encoded dictionary content.  # noqa: E501

        Downloads Base 64 encoded dictionary content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_data_download_get_with_http_info(session_token, key_manager_token, dict_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param str dict_version: If set to be valid dictionary version number, will return dictionary with specified version. Otherwise, return the latest dictionary. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'dict_id',
            'dict_version'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_dict_id_data_download_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_dict_id_data_download_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_dict_id_data_download_get`")  # noqa: E501
        # verify the required parameter 'dict_id' is set
        if self.api_client.client_side_validation and ('dict_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['dict_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dict_id` when calling `v1_dlp_dictionaries_dict_id_data_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_id' in local_var_params:
            path_params['dictId'] = local_var_params['dict_id']  # noqa: E501

        query_params = []
        if 'dict_version' in local_var_params and local_var_params['dict_version'] is not None:  # noqa: E501
            query_params.append(('dictVersion', local_var_params['dict_version']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries/{dictId}/data/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_dictionaries_dict_id_data_upload_post(self, session_token, key_manager_token, dict_id, data, **kwargs):  # noqa: E501
        """Override dictionary content with provided content.  # noqa: E501

        Override dictionary content with provided content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_data_upload_post(session_token, key_manager_token, dict_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param file data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPDictionaryMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_dict_id_data_upload_post_with_http_info(session_token, key_manager_token, dict_id, data, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_dict_id_data_upload_post_with_http_info(self, session_token, key_manager_token, dict_id, data, **kwargs):  # noqa: E501
        """Override dictionary content with provided content.  # noqa: E501

        Override dictionary content with provided content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_data_upload_post_with_http_info(session_token, key_manager_token, dict_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param file data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPDictionaryMetadataResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'dict_id',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_dict_id_data_upload_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_dict_id_data_upload_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_dict_id_data_upload_post`")  # noqa: E501
        # verify the required parameter 'dict_id' is set
        if self.api_client.client_side_validation and ('dict_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['dict_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dict_id` when calling `v1_dlp_dictionaries_dict_id_data_upload_post`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `v1_dlp_dictionaries_dict_id_data_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_id' in local_var_params:
            path_params['dictId'] = local_var_params['dict_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'data' in local_var_params:
            local_var_files['data'] = local_var_params['data']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries/{dictId}/data/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPDictionaryMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_dictionaries_dict_id_delete(self, session_token, key_manager_token, dict_id, **kwargs):  # noqa: E501
        """Delete a dictionary  # noqa: E501

        Deletes a dictionary. Note: All related policies will be affected.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_delete(session_token, key_manager_token, dict_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPDictionaryMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_dict_id_delete_with_http_info(session_token, key_manager_token, dict_id, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_dict_id_delete_with_http_info(self, session_token, key_manager_token, dict_id, **kwargs):  # noqa: E501
        """Delete a dictionary  # noqa: E501

        Deletes a dictionary. Note: All related policies will be affected.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_delete_with_http_info(session_token, key_manager_token, dict_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPDictionaryMetadataResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'dict_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_dict_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_dict_id_delete`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_dict_id_delete`")  # noqa: E501
        # verify the required parameter 'dict_id' is set
        if self.api_client.client_side_validation and ('dict_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['dict_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dict_id` when calling `v1_dlp_dictionaries_dict_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_id' in local_var_params:
            path_params['dictId'] = local_var_params['dict_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries/{dictId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPDictionaryMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_dictionaries_dict_id_get(self, session_token, key_manager_token, dict_id, **kwargs):  # noqa: E501
        """Get dictionary metadata  # noqa: E501

        Get basic information for a dictionary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_get(session_token, key_manager_token, dict_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param str dict_version: If set to be valid dictionary version number, will return dictionary metadata with specified version. Otherwise, return the latest dictionary metadata. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPDictionaryMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_dict_id_get_with_http_info(session_token, key_manager_token, dict_id, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_dict_id_get_with_http_info(self, session_token, key_manager_token, dict_id, **kwargs):  # noqa: E501
        """Get dictionary metadata  # noqa: E501

        Get basic information for a dictionary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_get_with_http_info(session_token, key_manager_token, dict_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param str dict_version: If set to be valid dictionary version number, will return dictionary metadata with specified version. Otherwise, return the latest dictionary metadata. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPDictionaryMetadataResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'dict_id',
            'dict_version'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_dict_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_dict_id_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_dict_id_get`")  # noqa: E501
        # verify the required parameter 'dict_id' is set
        if self.api_client.client_side_validation and ('dict_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['dict_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dict_id` when calling `v1_dlp_dictionaries_dict_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_id' in local_var_params:
            path_params['dictId'] = local_var_params['dict_id']  # noqa: E501

        query_params = []
        if 'dict_version' in local_var_params and local_var_params['dict_version'] is not None:  # noqa: E501
            query_params.append(('dictVersion', local_var_params['dict_version']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries/{dictId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPDictionaryMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_dictionaries_dict_id_put(self, session_token, key_manager_token, dict_id, body, **kwargs):  # noqa: E501
        """Updates a dictionary  # noqa: E501

        Updates the dictionary's basic metadata without content. This API cannot be used for creating a new dictionary. In case of update only \"name\" can be changed. Note: All related policies will also have versions updated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_put(session_token, key_manager_token, dict_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param V1DLPDictionaryMetadataUpdateRequest body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPDictionaryMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_dict_id_put_with_http_info(session_token, key_manager_token, dict_id, body, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_dict_id_put_with_http_info(self, session_token, key_manager_token, dict_id, body, **kwargs):  # noqa: E501
        """Updates a dictionary  # noqa: E501

        Updates the dictionary's basic metadata without content. This API cannot be used for creating a new dictionary. In case of update only \"name\" can be changed. Note: All related policies will also have versions updated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_dict_id_put_with_http_info(session_token, key_manager_token, dict_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str dict_id: Unique dictionary identifier (required)
        :param V1DLPDictionaryMetadataUpdateRequest body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPDictionaryMetadataResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'dict_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_dict_id_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_dict_id_put`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_dict_id_put`")  # noqa: E501
        # verify the required parameter 'dict_id' is set
        if self.api_client.client_side_validation and ('dict_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['dict_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dict_id` when calling `v1_dlp_dictionaries_dict_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `v1_dlp_dictionaries_dict_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_id' in local_var_params:
            path_params['dictId'] = local_var_params['dict_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries/{dictId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPDictionaryMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_dictionaries_get(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Get all dictionary metadatas  # noqa: E501

        Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_get(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int page: Optional parameter to specify which page to return (default is 0)
        :param int limit: Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPDictionaryMetadataCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_get_with_http_info(session_token, key_manager_token, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_get_with_http_info(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Get all dictionary metadatas  # noqa: E501

        Get all dictionary metadatas with the latest version. Each dictionary object will only contain meta data of the content.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_get_with_http_info(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int page: Optional parameter to specify which page to return (default is 0)
        :param int limit: Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPDictionaryMetadataCollectionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'page',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPDictionaryMetadataCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_dictionaries_post(self, session_token, key_manager_token, body, **kwargs):  # noqa: E501
        """Create a dictionary  # noqa: E501

        Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_post(session_token, key_manager_token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param V1DLPDictionaryMetadataCreateRequest body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPDictionaryMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_dictionaries_post_with_http_info(session_token, key_manager_token, body, **kwargs)  # noqa: E501

    def v1_dlp_dictionaries_post_with_http_info(self, session_token, key_manager_token, body, **kwargs):  # noqa: E501
        """Create a dictionary  # noqa: E501

        Creates a dictionary with basic metadata and no content. Only \"name\" and \"type\" field is used to create a new dictionary entry.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_dictionaries_post_with_http_info(session_token, key_manager_token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param V1DLPDictionaryMetadataCreateRequest body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPDictionaryMetadataResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_dictionaries_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_dictionaries_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_dictionaries_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `v1_dlp_dictionaries_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/dictionaries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPDictionaryMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_get(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Get all policies  # noqa: E501

        Get all policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_get(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int page: Optional parameter to specify which page to return (default is 0)
        :param int limit: Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPoliciesCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_get_with_http_info(session_token, key_manager_token, **kwargs)  # noqa: E501

    def v1_dlp_policies_get_with_http_info(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Get all policies  # noqa: E501

        Get all policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_get_with_http_info(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int page: Optional parameter to specify which page to return (default is 0)
        :param int limit: Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPoliciesCollectionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'page',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPoliciesCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_policy_id_delete(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Delete a policy  # noqa: E501

        Delete a policy. Note: Only disabled policy can be deleted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_delete(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_policy_id_delete_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v1_dlp_policies_policy_id_delete_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Delete a policy  # noqa: E501

        Delete a policy. Note: Only disabled policy can be deleted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_delete_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_policy_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_policy_id_delete`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_policy_id_delete`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_dlp_policies_policy_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_policy_id_disable_post(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Disables a policy.  # noqa: E501

        Disables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_disable_post(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_policy_id_disable_post_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v1_dlp_policies_policy_id_disable_post_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Disables a policy.  # noqa: E501

        Disables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_disable_post_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_policy_id_disable_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_policy_id_disable_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_policy_id_disable_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_dlp_policies_policy_id_disable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies/{policyId}/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_policy_id_enable_post(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Enables a policy.  # noqa: E501

        Enables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_enable_post(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_policy_id_enable_post_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v1_dlp_policies_policy_id_enable_post_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Enables a policy.  # noqa: E501

        Enables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_enable_post_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_policy_id_enable_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_policy_id_enable_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_policy_id_enable_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_dlp_policies_policy_id_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies/{policyId}/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_policy_id_get(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Get a policy  # noqa: E501

        Get a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_get(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param str policy_version: Optional parameter, if set to be valid policy version number,  will return policy with specified policyVersion. Otherwise, return the latest policy. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_policy_id_get_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v1_dlp_policies_policy_id_get_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Get a policy  # noqa: E501

        Get a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_get_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param str policy_version: Optional parameter, if set to be valid policy version number,  will return policy with specified policyVersion. Otherwise, return the latest policy. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id',
            'policy_version'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_policy_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_policy_id_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_policy_id_get`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_dlp_policies_policy_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []
        if 'policy_version' in local_var_params and local_var_params['policy_version'] is not None:  # noqa: E501
            query_params.append(('policyVersion', local_var_params['policy_version']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_policy_id_put(self, session_token, key_manager_token, policy_id, body, **kwargs):  # noqa: E501
        """Updates a policy. Cannot be used for creation.  # noqa: E501

        Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy. Warning: If you send empty list of dictionaries during the update operation, then all the dictionaries for this policy are deleted and policy is automatically disabled. Note: The policy should already exist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_put(session_token, key_manager_token, policy_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param V1DLPPolicyRequest body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_policy_id_put_with_http_info(session_token, key_manager_token, policy_id, body, **kwargs)  # noqa: E501

    def v1_dlp_policies_policy_id_put_with_http_info(self, session_token, key_manager_token, policy_id, body, **kwargs):  # noqa: E501
        """Updates a policy. Cannot be used for creation.  # noqa: E501

        Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy. Warning: If you send empty list of dictionaries during the update operation, then all the dictionaries for this policy are deleted and policy is automatically disabled. Note: The policy should already exist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_policy_id_put_with_http_info(session_token, key_manager_token, policy_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param V1DLPPolicyRequest body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_policy_id_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_policy_id_put`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_policy_id_put`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v1_dlp_policies_policy_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `v1_dlp_policies_policy_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_dlp_policies_post(self, session_token, key_manager_token, body, **kwargs):  # noqa: E501
        """Creates a policy  # noqa: E501

        Creates a new policy with dictionary references.  At the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.  Note - You need to enable the policy after creation to start enforcing the policy.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_post(session_token, key_manager_token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param V1DLPPolicyRequest body: Details about the policy that should be created. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V1DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v1_dlp_policies_post_with_http_info(session_token, key_manager_token, body, **kwargs)  # noqa: E501

    def v1_dlp_policies_post_with_http_info(self, session_token, key_manager_token, body, **kwargs):  # noqa: E501
        """Creates a policy  # noqa: E501

        Creates a new policy with dictionary references.  At the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically.  Note - You need to enable the policy after creation to start enforcing the policy.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_dlp_policies_post_with_http_info(session_token, key_manager_token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param V1DLPPolicyRequest body: Details about the policy that should be created. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V1DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_dlp_policies_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v1_dlp_policies_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v1_dlp_policies_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `v1_dlp_policies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/dlp/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_get(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Get all policies  # noqa: E501

        Get all policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_get(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int page: Optional parameter to specify which page to return (default is 0)
        :param int limit: Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPoliciesCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_get_with_http_info(session_token, key_manager_token, **kwargs)  # noqa: E501

    def v3_dlp_policies_get_with_http_info(self, session_token, key_manager_token, **kwargs):  # noqa: E501
        """Get all policies  # noqa: E501

        Get all policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_get_with_http_info(session_token, key_manager_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param int page: Optional parameter to specify which page to return (default is 0)
        :param int limit: Optional parameter to specify the number of result to return per page, default is 50. Maximum is 50. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPoliciesCollectionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'page',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPoliciesCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_policy_id_delete_post(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Delete a policy  # noqa: E501

        Delete a policy. Note: Only disabled policy can be deleted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_delete_post(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_policy_id_delete_post_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v3_dlp_policies_policy_id_delete_post_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Delete a policy  # noqa: E501

        Delete a policy. Note: Only disabled policy can be deleted   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_delete_post_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_policy_id_delete_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_policy_id_delete_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_policy_id_delete_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v3_dlp_policies_policy_id_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies/{policyId}/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_policy_id_disable_post(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Disables a policy.  # noqa: E501

        Disables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_disable_post(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_policy_id_disable_post_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v3_dlp_policies_policy_id_disable_post_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Disables a policy.  # noqa: E501

        Disables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_disable_post_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_policy_id_disable_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_policy_id_disable_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_policy_id_disable_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v3_dlp_policies_policy_id_disable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies/{policyId}/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_policy_id_enable_post(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Enables a policy.  # noqa: E501

        Enables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_enable_post(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_policy_id_enable_post_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v3_dlp_policies_policy_id_enable_post_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Enables a policy.  # noqa: E501

        Enables a policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_enable_post_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_policy_id_enable_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_policy_id_enable_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_policy_id_enable_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v3_dlp_policies_policy_id_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies/{policyId}/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_policy_id_get(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Get a policy  # noqa: E501

        Get a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_get(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param str policy_version: Optional parameter, if set to be valid policy version number,  will return policy with specified policyVersion. Otherwise, return the latest policy. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_policy_id_get_with_http_info(session_token, key_manager_token, policy_id, **kwargs)  # noqa: E501

    def v3_dlp_policies_policy_id_get_with_http_info(self, session_token, key_manager_token, policy_id, **kwargs):  # noqa: E501
        """Get a policy  # noqa: E501

        Get a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_get_with_http_info(session_token, key_manager_token, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param str policy_version: Optional parameter, if set to be valid policy version number,  will return policy with specified policyVersion. Otherwise, return the latest policy. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id',
            'policy_version'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_policy_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_policy_id_get`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_policy_id_get`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v3_dlp_policies_policy_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []
        if 'policy_version' in local_var_params and local_var_params['policy_version'] is not None:  # noqa: E501
            query_params.append(('policyVersion', local_var_params['policy_version']))  # noqa: E501

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_policy_id_update_post(self, session_token, key_manager_token, policy_id, body, **kwargs):  # noqa: E501
        """Updates a policy. Cannot be used for creation.  # noqa: E501

        Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy. Warning: If you send empty list of dictionaries during the update operation, then all the dictionaries for this policy are deleted and policy is automatically disabled. Note: The policy should already exist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_update_post(session_token, key_manager_token, policy_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param V3DLPPolicyRequest body: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_policy_id_update_post_with_http_info(session_token, key_manager_token, policy_id, body, **kwargs)  # noqa: E501

    def v3_dlp_policies_policy_id_update_post_with_http_info(self, session_token, key_manager_token, policy_id, body, **kwargs):  # noqa: E501
        """Updates a policy. Cannot be used for creation.  # noqa: E501

        Update the policy (name, type, contentTypes, scopes) and also the dictionaries for a policy. Warning: If you send empty list of dictionaries during the update operation, then all the dictionaries for this policy are deleted and policy is automatically disabled. Note: The policy should already exist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_policy_id_update_post_with_http_info(session_token, key_manager_token, policy_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param str policy_id: Unique dictionary identifier. (required)
        :param V3DLPPolicyRequest body: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'policy_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_policy_id_update_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_policy_id_update_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_policy_id_update_post`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['policy_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `policy_id` when calling `v3_dlp_policies_policy_id_update_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `v3_dlp_policies_policy_id_update_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in local_var_params:
            path_params['policyId'] = local_var_params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies/{policyId}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v3_dlp_policies_post(self, session_token, key_manager_token, body, **kwargs):  # noqa: E501
        """Creates a policy  # noqa: E501

        Creates a new policy with dictionary references. At the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically. Note - You need to enable the policy after creation to start enforcing the policy.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_post(session_token, key_manager_token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param V3DLPPolicyRequest body: Details about the policy that should be created. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: V3DLPPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v3_dlp_policies_post_with_http_info(session_token, key_manager_token, body, **kwargs)  # noqa: E501

    def v3_dlp_policies_post_with_http_info(self, session_token, key_manager_token, body, **kwargs):  # noqa: E501
        """Creates a policy  # noqa: E501

        Creates a new policy with dictionary references. At the time of policy creation, the caller should only provide - contentTypes, name, scopes and type. The rest of the information is populated automatically. Note - You need to enable the policy after creation to start enforcing the policy.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v3_dlp_policies_post_with_http_info(session_token, key_manager_token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str session_token: Session authentication token. (required)
        :param str key_manager_token: Key Manager authentication token. (required)
        :param V3DLPPolicyRequest body: Details about the policy that should be created. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(V3DLPPolicyResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'session_token',
            'key_manager_token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_dlp_policies_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_token' is set
        if self.api_client.client_side_validation and ('session_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['session_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_token` when calling `v3_dlp_policies_post`")  # noqa: E501
        # verify the required parameter 'key_manager_token' is set
        if self.api_client.client_side_validation and ('key_manager_token' not in local_var_params or  # noqa: E501
                                                        local_var_params['key_manager_token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `key_manager_token` when calling `v3_dlp_policies_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `v3_dlp_policies_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'session_token' in local_var_params:
            header_params['sessionToken'] = local_var_params['session_token']  # noqa: E501
        if 'key_manager_token' in local_var_params:
            header_params['keyManagerToken'] = local_var_params['key_manager_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/dlp/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3DLPPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

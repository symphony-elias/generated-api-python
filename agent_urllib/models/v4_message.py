# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V4Message(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message_id': 'str',
        'timestamp': 'int',
        'message': 'str',
        'shared_message': 'V4Message',
        'data': 'str',
        'attachments': 'list[V4AttachmentInfo]',
        'user': 'V4User',
        'stream': 'V4Stream',
        'external_recipients': 'bool',
        'diagnostic': 'str',
        'user_agent': 'str',
        'original_format': 'str',
        'disclaimer': 'str',
        'sid': 'str'
    }

    attribute_map = {
        'message_id': 'messageId',
        'timestamp': 'timestamp',
        'message': 'message',
        'shared_message': 'sharedMessage',
        'data': 'data',
        'attachments': 'attachments',
        'user': 'user',
        'stream': 'stream',
        'external_recipients': 'externalRecipients',
        'diagnostic': 'diagnostic',
        'user_agent': 'userAgent',
        'original_format': 'originalFormat',
        'disclaimer': 'disclaimer',
        'sid': 'sid'
    }

    def __init__(self, message_id=None, timestamp=None, message=None, shared_message=None, data=None, attachments=None, user=None, stream=None, external_recipients=None, diagnostic=None, user_agent=None, original_format=None, disclaimer=None, sid=None, local_vars_configuration=None):  # noqa: E501
        """V4Message - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._message_id = None
        self._timestamp = None
        self._message = None
        self._shared_message = None
        self._data = None
        self._attachments = None
        self._user = None
        self._stream = None
        self._external_recipients = None
        self._diagnostic = None
        self._user_agent = None
        self._original_format = None
        self._disclaimer = None
        self._sid = None
        self.discriminator = None

        if message_id is not None:
            self.message_id = message_id
        if timestamp is not None:
            self.timestamp = timestamp
        if message is not None:
            self.message = message
        if shared_message is not None:
            self.shared_message = shared_message
        if data is not None:
            self.data = data
        if attachments is not None:
            self.attachments = attachments
        if user is not None:
            self.user = user
        if stream is not None:
            self.stream = stream
        if external_recipients is not None:
            self.external_recipients = external_recipients
        if diagnostic is not None:
            self.diagnostic = diagnostic
        if user_agent is not None:
            self.user_agent = user_agent
        if original_format is not None:
            self.original_format = original_format
        if disclaimer is not None:
            self.disclaimer = disclaimer
        if sid is not None:
            self.sid = sid

    @property
    def message_id(self):
        """Gets the message_id of this V4Message.  # noqa: E501

        Id of the message  # noqa: E501

        :return: The message_id of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this V4Message.

        Id of the message  # noqa: E501

        :param message_id: The message_id of this V4Message.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def timestamp(self):
        """Gets the timestamp of this V4Message.  # noqa: E501

        Timestamp of the message in milliseconds since Jan 1 1970  # noqa: E501

        :return: The timestamp of this V4Message.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this V4Message.

        Timestamp of the message in milliseconds since Jan 1 1970  # noqa: E501

        :param timestamp: The timestamp of this V4Message.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this V4Message.  # noqa: E501

        Message content in MessageMLV2  # noqa: E501

        :return: The message of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V4Message.

        Message content in MessageMLV2  # noqa: E501

        :param message: The message of this V4Message.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def shared_message(self):
        """Gets the shared_message of this V4Message.  # noqa: E501


        :return: The shared_message of this V4Message.  # noqa: E501
        :rtype: V4Message
        """
        return self._shared_message

    @shared_message.setter
    def shared_message(self, shared_message):
        """Sets the shared_message of this V4Message.


        :param shared_message: The shared_message of this V4Message.  # noqa: E501
        :type: V4Message
        """

        self._shared_message = shared_message

    @property
    def data(self):
        """Gets the data of this V4Message.  # noqa: E501

        Message data in EntityJSON  # noqa: E501

        :return: The data of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V4Message.

        Message data in EntityJSON  # noqa: E501

        :param data: The data of this V4Message.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def attachments(self):
        """Gets the attachments of this V4Message.  # noqa: E501

        Message attachments  # noqa: E501

        :return: The attachments of this V4Message.  # noqa: E501
        :rtype: list[V4AttachmentInfo]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this V4Message.

        Message attachments  # noqa: E501

        :param attachments: The attachments of this V4Message.  # noqa: E501
        :type: list[V4AttachmentInfo]
        """

        self._attachments = attachments

    @property
    def user(self):
        """Gets the user of this V4Message.  # noqa: E501


        :return: The user of this V4Message.  # noqa: E501
        :rtype: V4User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V4Message.


        :param user: The user of this V4Message.  # noqa: E501
        :type: V4User
        """

        self._user = user

    @property
    def stream(self):
        """Gets the stream of this V4Message.  # noqa: E501


        :return: The stream of this V4Message.  # noqa: E501
        :rtype: V4Stream
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this V4Message.


        :param stream: The stream of this V4Message.  # noqa: E501
        :type: V4Stream
        """

        self._stream = stream

    @property
    def external_recipients(self):
        """Gets the external_recipients of this V4Message.  # noqa: E501

        Indicates if the message have external recipients. Only present on real time messaging.  # noqa: E501

        :return: The external_recipients of this V4Message.  # noqa: E501
        :rtype: bool
        """
        return self._external_recipients

    @external_recipients.setter
    def external_recipients(self, external_recipients):
        """Sets the external_recipients of this V4Message.

        Indicates if the message have external recipients. Only present on real time messaging.  # noqa: E501

        :param external_recipients: The external_recipients of this V4Message.  # noqa: E501
        :type: bool
        """

        self._external_recipients = external_recipients

    @property
    def diagnostic(self):
        """Gets the diagnostic of this V4Message.  # noqa: E501

        Details if event failed to parse for any reason.  The contents of this field may not be useful, depending on the nature of the error. Only present when error occurs.   # noqa: E501

        :return: The diagnostic of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._diagnostic

    @diagnostic.setter
    def diagnostic(self, diagnostic):
        """Sets the diagnostic of this V4Message.

        Details if event failed to parse for any reason.  The contents of this field may not be useful, depending on the nature of the error. Only present when error occurs.   # noqa: E501

        :param diagnostic: The diagnostic of this V4Message.  # noqa: E501
        :type: str
        """

        self._diagnostic = diagnostic

    @property
    def user_agent(self):
        """Gets the user_agent of this V4Message.  # noqa: E501

        User agent string for client that sent the message.  Allows callers to identify which client sent the origin message (e.g. API Agent, SFE Client, mobile, etc)   # noqa: E501

        :return: The user_agent of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this V4Message.

        User agent string for client that sent the message.  Allows callers to identify which client sent the origin message (e.g. API Agent, SFE Client, mobile, etc)   # noqa: E501

        :param user_agent: The user_agent of this V4Message.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def original_format(self):
        """Gets the original_format of this V4Message.  # noqa: E501

        Indicates the format in which the message was originally sent.  This could have been either: - com.symphony.markdown - Markdown OR Message ML V1 - com.symphony.messageml.v2 - Message ML V2   # noqa: E501

        :return: The original_format of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._original_format

    @original_format.setter
    def original_format(self, original_format):
        """Sets the original_format of this V4Message.

        Indicates the format in which the message was originally sent.  This could have been either: - com.symphony.markdown - Markdown OR Message ML V1 - com.symphony.messageml.v2 - Message ML V2   # noqa: E501

        :param original_format: The original_format of this V4Message.  # noqa: E501
        :type: str
        """

        self._original_format = original_format

    @property
    def disclaimer(self):
        """Gets the disclaimer of this V4Message.  # noqa: E501

        Message that may be sent along with a regular message if configured for the POD, usually the first message sent in a room that day.   # noqa: E501

        :return: The disclaimer of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer

    @disclaimer.setter
    def disclaimer(self, disclaimer):
        """Sets the disclaimer of this V4Message.

        Message that may be sent along with a regular message if configured for the POD, usually the first message sent in a room that day.   # noqa: E501

        :param disclaimer: The disclaimer of this V4Message.  # noqa: E501
        :type: str
        """

        self._disclaimer = disclaimer

    @property
    def sid(self):
        """Gets the sid of this V4Message.  # noqa: E501

        Unique session identifier from where the message was created.   # noqa: E501

        :return: The sid of this V4Message.  # noqa: E501
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this V4Message.

        Unique session identifier from where the message was created.   # noqa: E501

        :param sid: The sid of this V4Message.  # noqa: E501
        :type: str
        """

        self._sid = sid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4Message):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4Message):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V2BaseMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'timestamp': 'str',
        'v2message_type': 'str',
        'stream_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'v2message_type': 'v2messageType',
        'stream_id': 'streamId'
    }

    discriminator_value_class_map = {
        'RoomMemberPromotedToOwnerMessage': 'RoomMemberPromotedToOwnerMessage',
        'RoomDeactivatedMessage': 'RoomDeactivatedMessage',
        'RoomCreatedMessage': 'RoomCreatedMessage',
        'RoomReactivatedMessage': 'RoomReactivatedMessage',
        'UserLeftRoomMessage': 'UserLeftRoomMessage',
        'ConnectionRequestMessage': 'ConnectionRequestMessage',
        'RoomMemberDemotedFromOwnerMessage': 'RoomMemberDemotedFromOwnerMessage',
        'V2Message': 'V2Message',
        'RoomUpdatedMessage': 'RoomUpdatedMessage',
        'UserJoinedRoomMessage': 'UserJoinedRoomMessage'
    }

    def __init__(self, id=None, timestamp=None, v2message_type=None, stream_id=None, local_vars_configuration=None):  # noqa: E501
        """V2BaseMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._timestamp = None
        self._v2message_type = None
        self._stream_id = None
        self.discriminator = 'v2message_type'

        if id is not None:
            self.id = id
        self.timestamp = timestamp
        self.v2message_type = v2message_type
        self.stream_id = stream_id

    @property
    def id(self):
        """Gets the id of this V2BaseMessage.  # noqa: E501

        The messageId is assigned by the ingestor service when a message is sent.  # noqa: E501

        :return: The id of this V2BaseMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2BaseMessage.

        The messageId is assigned by the ingestor service when a message is sent.  # noqa: E501

        :param id: The id of this V2BaseMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this V2BaseMessage.  # noqa: E501


        :return: The timestamp of this V2BaseMessage.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this V2BaseMessage.


        :param timestamp: The timestamp of this V2BaseMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def v2message_type(self):
        """Gets the v2message_type of this V2BaseMessage.  # noqa: E501


        :return: The v2message_type of this V2BaseMessage.  # noqa: E501
        :rtype: str
        """
        return self._v2message_type

    @v2message_type.setter
    def v2message_type(self, v2message_type):
        """Sets the v2message_type of this V2BaseMessage.


        :param v2message_type: The v2message_type of this V2BaseMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and v2message_type is None:  # noqa: E501
            raise ValueError("Invalid value for `v2message_type`, must not be `None`")  # noqa: E501

        self._v2message_type = v2message_type

    @property
    def stream_id(self):
        """Gets the stream_id of this V2BaseMessage.  # noqa: E501


        :return: The stream_id of this V2BaseMessage.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this V2BaseMessage.


        :param stream_id: The stream_id of this V2BaseMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and stream_id is None:  # noqa: E501
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2BaseMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2BaseMessage):
            return True

        return self.to_dict() != other.to_dict()

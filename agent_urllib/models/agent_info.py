# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class AgentInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_address': 'str',
        'hostname': 'str',
        'server_fqdn': 'str',
        'version': 'str',
        'url': 'str',
        'on_prem': 'bool',
        'commit_id': 'str'
    }

    attribute_map = {
        'ip_address': 'ipAddress',
        'hostname': 'hostname',
        'server_fqdn': 'serverFqdn',
        'version': 'version',
        'url': 'url',
        'on_prem': 'onPrem',
        'commit_id': 'commitId'
    }

    def __init__(self, ip_address=None, hostname=None, server_fqdn=None, version=None, url=None, on_prem=None, commit_id=None, local_vars_configuration=None):  # noqa: E501
        """AgentInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ip_address = None
        self._hostname = None
        self._server_fqdn = None
        self._version = None
        self._url = None
        self._on_prem = None
        self._commit_id = None
        self.discriminator = None

        if ip_address is not None:
            self.ip_address = ip_address
        if hostname is not None:
            self.hostname = hostname
        if server_fqdn is not None:
            self.server_fqdn = server_fqdn
        if version is not None:
            self.version = version
        if url is not None:
            self.url = url
        if on_prem is not None:
            self.on_prem = on_prem
        if commit_id is not None:
            self.commit_id = commit_id

    @property
    def ip_address(self):
        """Gets the ip_address of this AgentInfo.  # noqa: E501

        The IP address of the Agent server.  # noqa: E501

        :return: The ip_address of this AgentInfo.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AgentInfo.

        The IP address of the Agent server.  # noqa: E501

        :param ip_address: The ip_address of this AgentInfo.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def hostname(self):
        """Gets the hostname of this AgentInfo.  # noqa: E501

        The hostname of the Agent server.  # noqa: E501

        :return: The hostname of this AgentInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AgentInfo.

        The hostname of the Agent server.  # noqa: E501

        :param hostname: The hostname of this AgentInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def server_fqdn(self):
        """Gets the server_fqdn of this AgentInfo.  # noqa: E501

        The fully-qualified domain name of the Agent server. Must be set by the user at startup.  # noqa: E501

        :return: The server_fqdn of this AgentInfo.  # noqa: E501
        :rtype: str
        """
        return self._server_fqdn

    @server_fqdn.setter
    def server_fqdn(self, server_fqdn):
        """Sets the server_fqdn of this AgentInfo.

        The fully-qualified domain name of the Agent server. Must be set by the user at startup.  # noqa: E501

        :param server_fqdn: The server_fqdn of this AgentInfo.  # noqa: E501
        :type: str
        """

        self._server_fqdn = server_fqdn

    @property
    def version(self):
        """Gets the version of this AgentInfo.  # noqa: E501

        The version of the Agent.  # noqa: E501

        :return: The version of this AgentInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AgentInfo.

        The version of the Agent.  # noqa: E501

        :param version: The version of this AgentInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def url(self):
        """Gets the url of this AgentInfo.  # noqa: E501

        The URL under which the Agent is available.  # noqa: E501

        :return: The url of this AgentInfo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AgentInfo.

        The URL under which the Agent is available.  # noqa: E501

        :param url: The url of this AgentInfo.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def on_prem(self):
        """Gets the on_prem of this AgentInfo.  # noqa: E501

        Whether this is an on-prem or cloud installation.  # noqa: E501

        :return: The on_prem of this AgentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._on_prem

    @on_prem.setter
    def on_prem(self, on_prem):
        """Sets the on_prem of this AgentInfo.

        Whether this is an on-prem or cloud installation.  # noqa: E501

        :param on_prem: The on_prem of this AgentInfo.  # noqa: E501
        :type: bool
        """

        self._on_prem = on_prem

    @property
    def commit_id(self):
        """Gets the commit_id of this AgentInfo.  # noqa: E501

        The Git commit ID of the running revision.  # noqa: E501

        :return: The commit_id of this AgentInfo.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this AgentInfo.

        The Git commit ID of the running revision.  # noqa: E501

        :param commit_id: The commit_id of this AgentInfo.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentInfo):
            return True

        return self.to_dict() != other.to_dict()

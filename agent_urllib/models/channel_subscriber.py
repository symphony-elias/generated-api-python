# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ChannelSubscriber(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subscription_id': 'str',
        'pushed': 'bool',
        'owner': 'bool',
        'subscriber_name': 'str',
        'user_id': 'int',
        'timestamp': 'int'
    }

    attribute_map = {
        'subscription_id': 'subscriptionId',
        'pushed': 'pushed',
        'owner': 'owner',
        'subscriber_name': 'subscriberName',
        'user_id': 'userId',
        'timestamp': 'timestamp'
    }

    def __init__(self, subscription_id=None, pushed=None, owner=None, subscriber_name=None, user_id=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """ChannelSubscriber - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._subscription_id = None
        self._pushed = None
        self._owner = None
        self._subscriber_name = None
        self._user_id = None
        self._timestamp = None
        self.discriminator = None

        if subscription_id is not None:
            self.subscription_id = subscription_id
        if pushed is not None:
            self.pushed = pushed
        if owner is not None:
            self.owner = owner
        if subscriber_name is not None:
            self.subscriber_name = subscriber_name
        if user_id is not None:
            self.user_id = user_id
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ChannelSubscriber.  # noqa: E501


        :return: The subscription_id of this ChannelSubscriber.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ChannelSubscriber.


        :param subscription_id: The subscription_id of this ChannelSubscriber.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def pushed(self):
        """Gets the pushed of this ChannelSubscriber.  # noqa: E501

        True if the subscriber is allowed to unsubscribe  # noqa: E501

        :return: The pushed of this ChannelSubscriber.  # noqa: E501
        :rtype: bool
        """
        return self._pushed

    @pushed.setter
    def pushed(self, pushed):
        """Sets the pushed of this ChannelSubscriber.

        True if the subscriber is allowed to unsubscribe  # noqa: E501

        :param pushed: The pushed of this ChannelSubscriber.  # noqa: E501
        :type: bool
        """

        self._pushed = pushed

    @property
    def owner(self):
        """Gets the owner of this ChannelSubscriber.  # noqa: E501

        True if the subscriber is the creator  # noqa: E501

        :return: The owner of this ChannelSubscriber.  # noqa: E501
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ChannelSubscriber.

        True if the subscriber is the creator  # noqa: E501

        :param owner: The owner of this ChannelSubscriber.  # noqa: E501
        :type: bool
        """

        self._owner = owner

    @property
    def subscriber_name(self):
        """Gets the subscriber_name of this ChannelSubscriber.  # noqa: E501

        User display name  # noqa: E501

        :return: The subscriber_name of this ChannelSubscriber.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_name

    @subscriber_name.setter
    def subscriber_name(self, subscriber_name):
        """Sets the subscriber_name of this ChannelSubscriber.

        User display name  # noqa: E501

        :param subscriber_name: The subscriber_name of this ChannelSubscriber.  # noqa: E501
        :type: str
        """

        self._subscriber_name = subscriber_name

    @property
    def user_id(self):
        """Gets the user_id of this ChannelSubscriber.  # noqa: E501

        The user ID of the subscriber  # noqa: E501

        :return: The user_id of this ChannelSubscriber.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ChannelSubscriber.

        The user ID of the subscriber  # noqa: E501

        :param user_id: The user_id of this ChannelSubscriber.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ChannelSubscriber.  # noqa: E501

        Timestamp when the signal was subscribed, in milliseconds since Jan 1 1970  # noqa: E501

        :return: The timestamp of this ChannelSubscriber.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ChannelSubscriber.

        Timestamp when the signal was subscribed, in milliseconds since Jan 1 1970  # noqa: E501

        :param timestamp: The timestamp of this ChannelSubscriber.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelSubscriber):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChannelSubscriber):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V4ImportedMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message': 'str',
        'data': 'str',
        'intended_message_timestamp': 'int',
        'intended_message_from_user_id': 'int',
        'originating_system_id': 'str',
        'original_message_id': 'str',
        'stream_id': 'str'
    }

    attribute_map = {
        'message': 'message',
        'data': 'data',
        'intended_message_timestamp': 'intendedMessageTimestamp',
        'intended_message_from_user_id': 'intendedMessageFromUserId',
        'originating_system_id': 'originatingSystemId',
        'original_message_id': 'originalMessageId',
        'stream_id': 'streamId'
    }

    def __init__(self, message=None, data=None, intended_message_timestamp=None, intended_message_from_user_id=None, originating_system_id=None, original_message_id=None, stream_id=None, local_vars_configuration=None):  # noqa: E501
        """V4ImportedMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._message = None
        self._data = None
        self._intended_message_timestamp = None
        self._intended_message_from_user_id = None
        self._originating_system_id = None
        self._original_message_id = None
        self._stream_id = None
        self.discriminator = None

        self.message = message
        if data is not None:
            self.data = data
        self.intended_message_timestamp = intended_message_timestamp
        self.intended_message_from_user_id = intended_message_from_user_id
        self.originating_system_id = originating_system_id
        if original_message_id is not None:
            self.original_message_id = original_message_id
        self.stream_id = stream_id

    @property
    def message(self):
        """Gets the message of this V4ImportedMessage.  # noqa: E501

        Message text in MessageMLV2  # noqa: E501

        :return: The message of this V4ImportedMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V4ImportedMessage.

        Message text in MessageMLV2  # noqa: E501

        :param message: The message of this V4ImportedMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def data(self):
        """Gets the data of this V4ImportedMessage.  # noqa: E501

        Entity data in EntityJSON  # noqa: E501

        :return: The data of this V4ImportedMessage.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V4ImportedMessage.

        Entity data in EntityJSON  # noqa: E501

        :param data: The data of this V4ImportedMessage.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def intended_message_timestamp(self):
        """Gets the intended_message_timestamp of this V4ImportedMessage.  # noqa: E501

        The timestamp representing the time when the message was sent in the original system in milliseconds since Jan 1st 1970.   # noqa: E501

        :return: The intended_message_timestamp of this V4ImportedMessage.  # noqa: E501
        :rtype: int
        """
        return self._intended_message_timestamp

    @intended_message_timestamp.setter
    def intended_message_timestamp(self, intended_message_timestamp):
        """Sets the intended_message_timestamp of this V4ImportedMessage.

        The timestamp representing the time when the message was sent in the original system in milliseconds since Jan 1st 1970.   # noqa: E501

        :param intended_message_timestamp: The intended_message_timestamp of this V4ImportedMessage.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and intended_message_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `intended_message_timestamp`, must not be `None`")  # noqa: E501

        self._intended_message_timestamp = intended_message_timestamp

    @property
    def intended_message_from_user_id(self):
        """Gets the intended_message_from_user_id of this V4ImportedMessage.  # noqa: E501

        The long integer userid of the Symphony user who you intend to show sent the message.   # noqa: E501

        :return: The intended_message_from_user_id of this V4ImportedMessage.  # noqa: E501
        :rtype: int
        """
        return self._intended_message_from_user_id

    @intended_message_from_user_id.setter
    def intended_message_from_user_id(self, intended_message_from_user_id):
        """Sets the intended_message_from_user_id of this V4ImportedMessage.

        The long integer userid of the Symphony user who you intend to show sent the message.   # noqa: E501

        :param intended_message_from_user_id: The intended_message_from_user_id of this V4ImportedMessage.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and intended_message_from_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `intended_message_from_user_id`, must not be `None`")  # noqa: E501

        self._intended_message_from_user_id = intended_message_from_user_id

    @property
    def originating_system_id(self):
        """Gets the originating_system_id of this V4ImportedMessage.  # noqa: E501

        The ID of the system through which the message was originally sent.   # noqa: E501

        :return: The originating_system_id of this V4ImportedMessage.  # noqa: E501
        :rtype: str
        """
        return self._originating_system_id

    @originating_system_id.setter
    def originating_system_id(self, originating_system_id):
        """Sets the originating_system_id of this V4ImportedMessage.

        The ID of the system through which the message was originally sent.   # noqa: E501

        :param originating_system_id: The originating_system_id of this V4ImportedMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and originating_system_id is None:  # noqa: E501
            raise ValueError("Invalid value for `originating_system_id`, must not be `None`")  # noqa: E501

        self._originating_system_id = originating_system_id

    @property
    def original_message_id(self):
        """Gets the original_message_id of this V4ImportedMessage.  # noqa: E501

        The ID of the message in the original system.   # noqa: E501

        :return: The original_message_id of this V4ImportedMessage.  # noqa: E501
        :rtype: str
        """
        return self._original_message_id

    @original_message_id.setter
    def original_message_id(self, original_message_id):
        """Sets the original_message_id of this V4ImportedMessage.

        The ID of the message in the original system.   # noqa: E501

        :param original_message_id: The original_message_id of this V4ImportedMessage.  # noqa: E501
        :type: str
        """

        self._original_message_id = original_message_id

    @property
    def stream_id(self):
        """Gets the stream_id of this V4ImportedMessage.  # noqa: E501


        :return: The stream_id of this V4ImportedMessage.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this V4ImportedMessage.


        :param stream_id: The stream_id of this V4ImportedMessage.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and stream_id is None:  # noqa: E501
            raise ValueError("Invalid value for `stream_id`, must not be `None`")  # noqa: E501

        self._stream_id = stream_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4ImportedMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4ImportedMessage):
            return True

        return self.to_dict() != other.to_dict()

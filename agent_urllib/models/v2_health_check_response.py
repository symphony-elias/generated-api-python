# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V2HealthCheckResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pod_connectivity': 'bool',
        'pod_connectivity_error': 'str',
        'key_manager_connectivity': 'bool',
        'key_manager_connectivity_error': 'str',
        'firehose_connectivity': 'bool',
        'firehose_connectivity_error': 'str',
        'encrypt_decrypt_success': 'bool',
        'encrypt_decrypt_error': 'str',
        'pod_version': 'str',
        'agent_version': 'str',
        'agent_service_user': 'bool',
        'agent_service_user_error': 'str',
        'ce_service_user': 'bool',
        'ce_service_user_error': 'str'
    }

    attribute_map = {
        'pod_connectivity': 'podConnectivity',
        'pod_connectivity_error': 'podConnectivityError',
        'key_manager_connectivity': 'keyManagerConnectivity',
        'key_manager_connectivity_error': 'keyManagerConnectivityError',
        'firehose_connectivity': 'firehoseConnectivity',
        'firehose_connectivity_error': 'firehoseConnectivityError',
        'encrypt_decrypt_success': 'encryptDecryptSuccess',
        'encrypt_decrypt_error': 'encryptDecryptError',
        'pod_version': 'podVersion',
        'agent_version': 'agentVersion',
        'agent_service_user': 'agentServiceUser',
        'agent_service_user_error': 'agentServiceUserError',
        'ce_service_user': 'ceServiceUser',
        'ce_service_user_error': 'ceServiceUserError'
    }

    def __init__(self, pod_connectivity=None, pod_connectivity_error=None, key_manager_connectivity=None, key_manager_connectivity_error=None, firehose_connectivity=None, firehose_connectivity_error=None, encrypt_decrypt_success=None, encrypt_decrypt_error=None, pod_version=None, agent_version=None, agent_service_user=None, agent_service_user_error=None, ce_service_user=None, ce_service_user_error=None, local_vars_configuration=None):  # noqa: E501
        """V2HealthCheckResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pod_connectivity = None
        self._pod_connectivity_error = None
        self._key_manager_connectivity = None
        self._key_manager_connectivity_error = None
        self._firehose_connectivity = None
        self._firehose_connectivity_error = None
        self._encrypt_decrypt_success = None
        self._encrypt_decrypt_error = None
        self._pod_version = None
        self._agent_version = None
        self._agent_service_user = None
        self._agent_service_user_error = None
        self._ce_service_user = None
        self._ce_service_user_error = None
        self.discriminator = None

        if pod_connectivity is not None:
            self.pod_connectivity = pod_connectivity
        if pod_connectivity_error is not None:
            self.pod_connectivity_error = pod_connectivity_error
        if key_manager_connectivity is not None:
            self.key_manager_connectivity = key_manager_connectivity
        if key_manager_connectivity_error is not None:
            self.key_manager_connectivity_error = key_manager_connectivity_error
        if firehose_connectivity is not None:
            self.firehose_connectivity = firehose_connectivity
        if firehose_connectivity_error is not None:
            self.firehose_connectivity_error = firehose_connectivity_error
        if encrypt_decrypt_success is not None:
            self.encrypt_decrypt_success = encrypt_decrypt_success
        if encrypt_decrypt_error is not None:
            self.encrypt_decrypt_error = encrypt_decrypt_error
        if pod_version is not None:
            self.pod_version = pod_version
        if agent_version is not None:
            self.agent_version = agent_version
        if agent_service_user is not None:
            self.agent_service_user = agent_service_user
        if agent_service_user_error is not None:
            self.agent_service_user_error = agent_service_user_error
        if ce_service_user is not None:
            self.ce_service_user = ce_service_user
        if ce_service_user_error is not None:
            self.ce_service_user_error = ce_service_user_error

    @property
    def pod_connectivity(self):
        """Gets the pod_connectivity of this V2HealthCheckResponse.  # noqa: E501

        Indicates whether the Agent server can connect to the Pod  # noqa: E501

        :return: The pod_connectivity of this V2HealthCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._pod_connectivity

    @pod_connectivity.setter
    def pod_connectivity(self, pod_connectivity):
        """Sets the pod_connectivity of this V2HealthCheckResponse.

        Indicates whether the Agent server can connect to the Pod  # noqa: E501

        :param pod_connectivity: The pod_connectivity of this V2HealthCheckResponse.  # noqa: E501
        :type: bool
        """

        self._pod_connectivity = pod_connectivity

    @property
    def pod_connectivity_error(self):
        """Gets the pod_connectivity_error of this V2HealthCheckResponse.  # noqa: E501

        Error details in case of no Pod connectivity  # noqa: E501

        :return: The pod_connectivity_error of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._pod_connectivity_error

    @pod_connectivity_error.setter
    def pod_connectivity_error(self, pod_connectivity_error):
        """Sets the pod_connectivity_error of this V2HealthCheckResponse.

        Error details in case of no Pod connectivity  # noqa: E501

        :param pod_connectivity_error: The pod_connectivity_error of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._pod_connectivity_error = pod_connectivity_error

    @property
    def key_manager_connectivity(self):
        """Gets the key_manager_connectivity of this V2HealthCheckResponse.  # noqa: E501

        Indicates whether the Agent server can connect to the Key Manager  # noqa: E501

        :return: The key_manager_connectivity of this V2HealthCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._key_manager_connectivity

    @key_manager_connectivity.setter
    def key_manager_connectivity(self, key_manager_connectivity):
        """Sets the key_manager_connectivity of this V2HealthCheckResponse.

        Indicates whether the Agent server can connect to the Key Manager  # noqa: E501

        :param key_manager_connectivity: The key_manager_connectivity of this V2HealthCheckResponse.  # noqa: E501
        :type: bool
        """

        self._key_manager_connectivity = key_manager_connectivity

    @property
    def key_manager_connectivity_error(self):
        """Gets the key_manager_connectivity_error of this V2HealthCheckResponse.  # noqa: E501

        Error details in case of no Key Manager connectivity  # noqa: E501

        :return: The key_manager_connectivity_error of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._key_manager_connectivity_error

    @key_manager_connectivity_error.setter
    def key_manager_connectivity_error(self, key_manager_connectivity_error):
        """Sets the key_manager_connectivity_error of this V2HealthCheckResponse.

        Error details in case of no Key Manager connectivity  # noqa: E501

        :param key_manager_connectivity_error: The key_manager_connectivity_error of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._key_manager_connectivity_error = key_manager_connectivity_error

    @property
    def firehose_connectivity(self):
        """Gets the firehose_connectivity of this V2HealthCheckResponse.  # noqa: E501

        Indicates whether the Agent server can connect to Firehose Service  # noqa: E501

        :return: The firehose_connectivity of this V2HealthCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._firehose_connectivity

    @firehose_connectivity.setter
    def firehose_connectivity(self, firehose_connectivity):
        """Sets the firehose_connectivity of this V2HealthCheckResponse.

        Indicates whether the Agent server can connect to Firehose Service  # noqa: E501

        :param firehose_connectivity: The firehose_connectivity of this V2HealthCheckResponse.  # noqa: E501
        :type: bool
        """

        self._firehose_connectivity = firehose_connectivity

    @property
    def firehose_connectivity_error(self):
        """Gets the firehose_connectivity_error of this V2HealthCheckResponse.  # noqa: E501

        Error details in case of no Firehose connectivity  # noqa: E501

        :return: The firehose_connectivity_error of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._firehose_connectivity_error

    @firehose_connectivity_error.setter
    def firehose_connectivity_error(self, firehose_connectivity_error):
        """Sets the firehose_connectivity_error of this V2HealthCheckResponse.

        Error details in case of no Firehose connectivity  # noqa: E501

        :param firehose_connectivity_error: The firehose_connectivity_error of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._firehose_connectivity_error = firehose_connectivity_error

    @property
    def encrypt_decrypt_success(self):
        """Gets the encrypt_decrypt_success of this V2HealthCheckResponse.  # noqa: E501

        Indicates whether the Agent can successfully decrypt and encrypt messages  # noqa: E501

        :return: The encrypt_decrypt_success of this V2HealthCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_decrypt_success

    @encrypt_decrypt_success.setter
    def encrypt_decrypt_success(self, encrypt_decrypt_success):
        """Sets the encrypt_decrypt_success of this V2HealthCheckResponse.

        Indicates whether the Agent can successfully decrypt and encrypt messages  # noqa: E501

        :param encrypt_decrypt_success: The encrypt_decrypt_success of this V2HealthCheckResponse.  # noqa: E501
        :type: bool
        """

        self._encrypt_decrypt_success = encrypt_decrypt_success

    @property
    def encrypt_decrypt_error(self):
        """Gets the encrypt_decrypt_error of this V2HealthCheckResponse.  # noqa: E501

        Error details in case of the encryption or decryption of the message fails  # noqa: E501

        :return: The encrypt_decrypt_error of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._encrypt_decrypt_error

    @encrypt_decrypt_error.setter
    def encrypt_decrypt_error(self, encrypt_decrypt_error):
        """Sets the encrypt_decrypt_error of this V2HealthCheckResponse.

        Error details in case of the encryption or decryption of the message fails  # noqa: E501

        :param encrypt_decrypt_error: The encrypt_decrypt_error of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._encrypt_decrypt_error = encrypt_decrypt_error

    @property
    def pod_version(self):
        """Gets the pod_version of this V2HealthCheckResponse.  # noqa: E501

        The version number of the pod  # noqa: E501

        :return: The pod_version of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._pod_version

    @pod_version.setter
    def pod_version(self, pod_version):
        """Sets the pod_version of this V2HealthCheckResponse.

        The version number of the pod  # noqa: E501

        :param pod_version: The pod_version of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._pod_version = pod_version

    @property
    def agent_version(self):
        """Gets the agent_version of this V2HealthCheckResponse.  # noqa: E501

        The version number of the Agent server  # noqa: E501

        :return: The agent_version of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this V2HealthCheckResponse.

        The version number of the Agent server  # noqa: E501

        :param agent_version: The agent_version of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._agent_version = agent_version

    @property
    def agent_service_user(self):
        """Gets the agent_service_user of this V2HealthCheckResponse.  # noqa: E501

        Indicates whether agent service user is setup correctly.  # noqa: E501

        :return: The agent_service_user of this V2HealthCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._agent_service_user

    @agent_service_user.setter
    def agent_service_user(self, agent_service_user):
        """Sets the agent_service_user of this V2HealthCheckResponse.

        Indicates whether agent service user is setup correctly.  # noqa: E501

        :param agent_service_user: The agent_service_user of this V2HealthCheckResponse.  # noqa: E501
        :type: bool
        """

        self._agent_service_user = agent_service_user

    @property
    def agent_service_user_error(self):
        """Gets the agent_service_user_error of this V2HealthCheckResponse.  # noqa: E501

        Error details in case agent service user is setup incorrectly.  # noqa: E501

        :return: The agent_service_user_error of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._agent_service_user_error

    @agent_service_user_error.setter
    def agent_service_user_error(self, agent_service_user_error):
        """Sets the agent_service_user_error of this V2HealthCheckResponse.

        Error details in case agent service user is setup incorrectly.  # noqa: E501

        :param agent_service_user_error: The agent_service_user_error of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._agent_service_user_error = agent_service_user_error

    @property
    def ce_service_user(self):
        """Gets the ce_service_user of this V2HealthCheckResponse.  # noqa: E501

        Indicates whether CEService user is setup correctly.  # noqa: E501

        :return: The ce_service_user of this V2HealthCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ce_service_user

    @ce_service_user.setter
    def ce_service_user(self, ce_service_user):
        """Sets the ce_service_user of this V2HealthCheckResponse.

        Indicates whether CEService user is setup correctly.  # noqa: E501

        :param ce_service_user: The ce_service_user of this V2HealthCheckResponse.  # noqa: E501
        :type: bool
        """

        self._ce_service_user = ce_service_user

    @property
    def ce_service_user_error(self):
        """Gets the ce_service_user_error of this V2HealthCheckResponse.  # noqa: E501

        Error details in case CEService user is setup incorrectly.  # noqa: E501

        :return: The ce_service_user_error of this V2HealthCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._ce_service_user_error

    @ce_service_user_error.setter
    def ce_service_user_error(self, ce_service_user_error):
        """Sets the ce_service_user_error of this V2HealthCheckResponse.

        Error details in case CEService user is setup incorrectly.  # noqa: E501

        :param ce_service_user_error: The ce_service_user_error of this V2HealthCheckResponse.  # noqa: E501
        :type: str
        """

        self._ce_service_user_error = ce_service_user_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2HealthCheckResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2HealthCheckResponse):
            return True

        return self.to_dict() != other.to_dict()

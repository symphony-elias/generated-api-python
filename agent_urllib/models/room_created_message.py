# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RoomCreatedMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_date': 'int',
        'name': 'str',
        'keywords': 'list[RoomTag]',
        'description': 'str',
        'created_by_user_id': 'int',
        'read_only': 'bool',
        'discoverable': 'bool',
        'public': 'bool',
        'members_can_invite': 'bool',
        'copy_protected': 'bool'
    }

    attribute_map = {
        'creation_date': 'creationDate',
        'name': 'name',
        'keywords': 'keywords',
        'description': 'description',
        'created_by_user_id': 'createdByUserId',
        'read_only': 'readOnly',
        'discoverable': 'discoverable',
        'public': 'public',
        'members_can_invite': 'membersCanInvite',
        'copy_protected': 'copyProtected'
    }

    def __init__(self, creation_date=None, name=None, keywords=None, description=None, created_by_user_id=None, read_only=None, discoverable=None, public=None, members_can_invite=None, copy_protected=None, local_vars_configuration=None):  # noqa: E501
        """RoomCreatedMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._creation_date = None
        self._name = None
        self._keywords = None
        self._description = None
        self._created_by_user_id = None
        self._read_only = None
        self._discoverable = None
        self._public = None
        self._members_can_invite = None
        self._copy_protected = None
        self.discriminator = None

        if creation_date is not None:
            self.creation_date = creation_date
        if name is not None:
            self.name = name
        if keywords is not None:
            self.keywords = keywords
        if description is not None:
            self.description = description
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if read_only is not None:
            self.read_only = read_only
        if discoverable is not None:
            self.discoverable = discoverable
        if public is not None:
            self.public = public
        if members_can_invite is not None:
            self.members_can_invite = members_can_invite
        if copy_protected is not None:
            self.copy_protected = copy_protected

    @property
    def creation_date(self):
        """Gets the creation_date of this RoomCreatedMessage.  # noqa: E501


        :return: The creation_date of this RoomCreatedMessage.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this RoomCreatedMessage.


        :param creation_date: The creation_date of this RoomCreatedMessage.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def name(self):
        """Gets the name of this RoomCreatedMessage.  # noqa: E501


        :return: The name of this RoomCreatedMessage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoomCreatedMessage.


        :param name: The name of this RoomCreatedMessage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def keywords(self):
        """Gets the keywords of this RoomCreatedMessage.  # noqa: E501


        :return: The keywords of this RoomCreatedMessage.  # noqa: E501
        :rtype: list[RoomTag]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this RoomCreatedMessage.


        :param keywords: The keywords of this RoomCreatedMessage.  # noqa: E501
        :type: list[RoomTag]
        """

        self._keywords = keywords

    @property
    def description(self):
        """Gets the description of this RoomCreatedMessage.  # noqa: E501


        :return: The description of this RoomCreatedMessage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoomCreatedMessage.


        :param description: The description of this RoomCreatedMessage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this RoomCreatedMessage.  # noqa: E501

        The Symphony userId of the user who created the room.  # noqa: E501

        :return: The created_by_user_id of this RoomCreatedMessage.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this RoomCreatedMessage.

        The Symphony userId of the user who created the room.  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this RoomCreatedMessage.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def read_only(self):
        """Gets the read_only of this RoomCreatedMessage.  # noqa: E501


        :return: The read_only of this RoomCreatedMessage.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this RoomCreatedMessage.


        :param read_only: The read_only of this RoomCreatedMessage.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def discoverable(self):
        """Gets the discoverable of this RoomCreatedMessage.  # noqa: E501


        :return: The discoverable of this RoomCreatedMessage.  # noqa: E501
        :rtype: bool
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """Sets the discoverable of this RoomCreatedMessage.


        :param discoverable: The discoverable of this RoomCreatedMessage.  # noqa: E501
        :type: bool
        """

        self._discoverable = discoverable

    @property
    def public(self):
        """Gets the public of this RoomCreatedMessage.  # noqa: E501


        :return: The public of this RoomCreatedMessage.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this RoomCreatedMessage.


        :param public: The public of this RoomCreatedMessage.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def members_can_invite(self):
        """Gets the members_can_invite of this RoomCreatedMessage.  # noqa: E501


        :return: The members_can_invite of this RoomCreatedMessage.  # noqa: E501
        :rtype: bool
        """
        return self._members_can_invite

    @members_can_invite.setter
    def members_can_invite(self, members_can_invite):
        """Sets the members_can_invite of this RoomCreatedMessage.


        :param members_can_invite: The members_can_invite of this RoomCreatedMessage.  # noqa: E501
        :type: bool
        """

        self._members_can_invite = members_can_invite

    @property
    def copy_protected(self):
        """Gets the copy_protected of this RoomCreatedMessage.  # noqa: E501


        :return: The copy_protected of this RoomCreatedMessage.  # noqa: E501
        :rtype: bool
        """
        return self._copy_protected

    @copy_protected.setter
    def copy_protected(self, copy_protected):
        """Sets the copy_protected of this RoomCreatedMessage.


        :param copy_protected: The copy_protected of this RoomCreatedMessage.  # noqa: E501
        :type: bool
        """

        self._copy_protected = copy_protected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomCreatedMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoomCreatedMessage):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class MessageSearchQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'text': 'str',
        'stream_id': 'str',
        'stream_type': 'str',
        'author': 'int',
        'hashtag': 'str',
        'cashtag': 'str',
        'mention': 'int',
        'signal': 'str',
        'from_date': 'int',
        'to_date': 'int'
    }

    attribute_map = {
        'text': 'text',
        'stream_id': 'streamId',
        'stream_type': 'streamType',
        'author': 'author',
        'hashtag': 'hashtag',
        'cashtag': 'cashtag',
        'mention': 'mention',
        'signal': 'signal',
        'from_date': 'fromDate',
        'to_date': 'toDate'
    }

    def __init__(self, text=None, stream_id=None, stream_type=None, author=None, hashtag=None, cashtag=None, mention=None, signal=None, from_date=None, to_date=None, local_vars_configuration=None):  # noqa: E501
        """MessageSearchQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._text = None
        self._stream_id = None
        self._stream_type = None
        self._author = None
        self._hashtag = None
        self._cashtag = None
        self._mention = None
        self._signal = None
        self._from_date = None
        self._to_date = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if stream_id is not None:
            self.stream_id = stream_id
        if stream_type is not None:
            self.stream_type = stream_type
        if author is not None:
            self.author = author
        if hashtag is not None:
            self.hashtag = hashtag
        if cashtag is not None:
            self.cashtag = cashtag
        if mention is not None:
            self.mention = mention
        if signal is not None:
            self.signal = signal
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date

    @property
    def text(self):
        """Gets the text of this MessageSearchQuery.  # noqa: E501

        Search for messages containing this text. Requires streamId to be specified.  # noqa: E501

        :return: The text of this MessageSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessageSearchQuery.

        Search for messages containing this text. Requires streamId to be specified.  # noqa: E501

        :param text: The text of this MessageSearchQuery.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def stream_id(self):
        """Gets the stream_id of this MessageSearchQuery.  # noqa: E501

        Search for messages sent to this stream  # noqa: E501

        :return: The stream_id of this MessageSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this MessageSearchQuery.

        Search for messages sent to this stream  # noqa: E501

        :param stream_id: The stream_id of this MessageSearchQuery.  # noqa: E501
        :type: str
        """

        self._stream_id = stream_id

    @property
    def stream_type(self):
        """Gets the stream_type of this MessageSearchQuery.  # noqa: E501

        Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST.   # noqa: E501

        :return: The stream_type of this MessageSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._stream_type

    @stream_type.setter
    def stream_type(self, stream_type):
        """Sets the stream_type of this MessageSearchQuery.

        Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST.   # noqa: E501

        :param stream_type: The stream_type of this MessageSearchQuery.  # noqa: E501
        :type: str
        """

        self._stream_type = stream_type

    @property
    def author(self):
        """Gets the author of this MessageSearchQuery.  # noqa: E501

        Search for messages sent by this user ID  # noqa: E501

        :return: The author of this MessageSearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this MessageSearchQuery.

        Search for messages sent by this user ID  # noqa: E501

        :param author: The author of this MessageSearchQuery.  # noqa: E501
        :type: int
        """

        self._author = author

    @property
    def hashtag(self):
        """Gets the hashtag of this MessageSearchQuery.  # noqa: E501

        Search for messages containing this hashtag  # noqa: E501

        :return: The hashtag of this MessageSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._hashtag

    @hashtag.setter
    def hashtag(self, hashtag):
        """Sets the hashtag of this MessageSearchQuery.

        Search for messages containing this hashtag  # noqa: E501

        :param hashtag: The hashtag of this MessageSearchQuery.  # noqa: E501
        :type: str
        """

        self._hashtag = hashtag

    @property
    def cashtag(self):
        """Gets the cashtag of this MessageSearchQuery.  # noqa: E501

        Search for messages containing this cashtag  # noqa: E501

        :return: The cashtag of this MessageSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._cashtag

    @cashtag.setter
    def cashtag(self, cashtag):
        """Sets the cashtag of this MessageSearchQuery.

        Search for messages containing this cashtag  # noqa: E501

        :param cashtag: The cashtag of this MessageSearchQuery.  # noqa: E501
        :type: str
        """

        self._cashtag = cashtag

    @property
    def mention(self):
        """Gets the mention of this MessageSearchQuery.  # noqa: E501

        Search for messages mentioning this user ID  # noqa: E501

        :return: The mention of this MessageSearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._mention

    @mention.setter
    def mention(self, mention):
        """Sets the mention of this MessageSearchQuery.

        Search for messages mentioning this user ID  # noqa: E501

        :param mention: The mention of this MessageSearchQuery.  # noqa: E501
        :type: int
        """

        self._mention = mention

    @property
    def signal(self):
        """Gets the signal of this MessageSearchQuery.  # noqa: E501

        Search for messages matching this signal. Can only be combined with date filtering and paging parameters.   # noqa: E501

        :return: The signal of this MessageSearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this MessageSearchQuery.

        Search for messages matching this signal. Can only be combined with date filtering and paging parameters.   # noqa: E501

        :param signal: The signal of this MessageSearchQuery.  # noqa: E501
        :type: str
        """

        self._signal = signal

    @property
    def from_date(self):
        """Gets the from_date of this MessageSearchQuery.  # noqa: E501

        Search for messages sent on or after this timestamp  # noqa: E501

        :return: The from_date of this MessageSearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this MessageSearchQuery.

        Search for messages sent on or after this timestamp  # noqa: E501

        :param from_date: The from_date of this MessageSearchQuery.  # noqa: E501
        :type: int
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this MessageSearchQuery.  # noqa: E501

        Search for messages sent before this timestamp  # noqa: E501

        :return: The to_date of this MessageSearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this MessageSearchQuery.

        Search for messages sent before this timestamp  # noqa: E501

        :param to_date: The to_date of this MessageSearchQuery.  # noqa: E501
        :type: int
        """

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageSearchQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MessageSearchQuery):
            return True

        return self.to_dict() != other.to_dict()

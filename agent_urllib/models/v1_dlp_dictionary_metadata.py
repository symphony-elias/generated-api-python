# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V1DLPDictionaryMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'creation_date': 'int',
        'creator_id': 'str',
        'dict_ref': 'V1DLPDictionaryRef',
        'last_updated_date': 'int',
        'type': 'str'
    }

    attribute_map = {
        'creation_date': 'creationDate',
        'creator_id': 'creatorId',
        'dict_ref': 'dictRef',
        'last_updated_date': 'lastUpdatedDate',
        'type': 'type'
    }

    def __init__(self, creation_date=None, creator_id=None, dict_ref=None, last_updated_date=None, type=None, local_vars_configuration=None):  # noqa: E501
        """V1DLPDictionaryMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._creation_date = None
        self._creator_id = None
        self._dict_ref = None
        self._last_updated_date = None
        self._type = None
        self.discriminator = None

        if creation_date is not None:
            self.creation_date = creation_date
        if creator_id is not None:
            self.creator_id = creator_id
        self.dict_ref = dict_ref
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        self.type = type

    @property
    def creation_date(self):
        """Gets the creation_date of this V1DLPDictionaryMetadata.  # noqa: E501

        Creation time of the dictionary in milliseconds elapsed as of epoch time.  # noqa: E501

        :return: The creation_date of this V1DLPDictionaryMetadata.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this V1DLPDictionaryMetadata.

        Creation time of the dictionary in milliseconds elapsed as of epoch time.  # noqa: E501

        :param creation_date: The creation_date of this V1DLPDictionaryMetadata.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def creator_id(self):
        """Gets the creator_id of this V1DLPDictionaryMetadata.  # noqa: E501

        Numeric userId of the creator  # noqa: E501

        :return: The creator_id of this V1DLPDictionaryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this V1DLPDictionaryMetadata.

        Numeric userId of the creator  # noqa: E501

        :param creator_id: The creator_id of this V1DLPDictionaryMetadata.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def dict_ref(self):
        """Gets the dict_ref of this V1DLPDictionaryMetadata.  # noqa: E501


        :return: The dict_ref of this V1DLPDictionaryMetadata.  # noqa: E501
        :rtype: V1DLPDictionaryRef
        """
        return self._dict_ref

    @dict_ref.setter
    def dict_ref(self, dict_ref):
        """Sets the dict_ref of this V1DLPDictionaryMetadata.


        :param dict_ref: The dict_ref of this V1DLPDictionaryMetadata.  # noqa: E501
        :type: V1DLPDictionaryRef
        """
        if self.local_vars_configuration.client_side_validation and dict_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `dict_ref`, must not be `None`")  # noqa: E501

        self._dict_ref = dict_ref

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this V1DLPDictionaryMetadata.  # noqa: E501

        The recent update time of the dictionary in milliseconds  # noqa: E501

        :return: The last_updated_date of this V1DLPDictionaryMetadata.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this V1DLPDictionaryMetadata.

        The recent update time of the dictionary in milliseconds  # noqa: E501

        :param last_updated_date: The last_updated_date of this V1DLPDictionaryMetadata.  # noqa: E501
        :type: int
        """

        self._last_updated_date = last_updated_date

    @property
    def type(self):
        """Gets the type of this V1DLPDictionaryMetadata.  # noqa: E501

        The type of dictionary, which specify the content is a list of words or a list of regexes. By default set to \"Word\" if not specified. Possible values - Word, Regex   # noqa: E501

        :return: The type of this V1DLPDictionaryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1DLPDictionaryMetadata.

        The type of dictionary, which specify the content is a list of words or a list of regexes. By default set to \"Word\" if not specified. Possible values - Word, Regex   # noqa: E501

        :param type: The type of this V1DLPDictionaryMetadata.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DLPDictionaryMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DLPDictionaryMetadata):
            return True

        return self.to_dict() != other.to_dict()

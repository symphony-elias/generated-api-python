# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V4User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'display_name': 'str',
        'email': 'str',
        'username': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'display_name': 'displayName',
        'email': 'email',
        'username': 'username'
    }

    def __init__(self, user_id=None, first_name=None, last_name=None, display_name=None, email=None, username=None, local_vars_configuration=None):  # noqa: E501
        """V4User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._display_name = None
        self._email = None
        self._username = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if username is not None:
            self.username = username

    @property
    def user_id(self):
        """Gets the user_id of this V4User.  # noqa: E501

        Id of user  # noqa: E501

        :return: The user_id of this V4User.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V4User.

        Id of user  # noqa: E501

        :param user_id: The user_id of this V4User.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this V4User.  # noqa: E501

        First name of user  # noqa: E501

        :return: The first_name of this V4User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this V4User.

        First name of user  # noqa: E501

        :param first_name: The first_name of this V4User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this V4User.  # noqa: E501

        Last name of user  # noqa: E501

        :return: The last_name of this V4User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this V4User.

        Last name of user  # noqa: E501

        :param last_name: The last_name of this V4User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def display_name(self):
        """Gets the display_name of this V4User.  # noqa: E501

        User display name  # noqa: E501

        :return: The display_name of this V4User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V4User.

        User display name  # noqa: E501

        :param display_name: The display_name of this V4User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this V4User.  # noqa: E501

        Email of user  # noqa: E501

        :return: The email of this V4User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this V4User.

        Email of user  # noqa: E501

        :param email: The email of this V4User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def username(self):
        """Gets the username of this V4User.  # noqa: E501

        Applicable only to internal users  # noqa: E501

        :return: The username of this V4User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this V4User.

        Applicable only to internal users  # noqa: E501

        :param username: The username of this V4User.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4User):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V3DLPPolicyRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'scopes': 'list[str]',
        'applies_to': 'list[V3DLPPolicyAppliesTo]'
    }

    attribute_map = {
        'name': 'name',
        'scopes': 'scopes',
        'applies_to': 'appliesTo'
    }

    def __init__(self, name=None, scopes=None, applies_to=None, local_vars_configuration=None):  # noqa: E501
        """V3DLPPolicyRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._scopes = None
        self._applies_to = None
        self.discriminator = None

        self.name = name
        self.scopes = scopes
        self.applies_to = applies_to

    @property
    def name(self):
        """Gets the name of this V3DLPPolicyRequest.  # noqa: E501

        Unique name of a policy, max 30 characters. Cannot be empty. All the leading and trailing blank spaces are trimmed.   # noqa: E501

        :return: The name of this V3DLPPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V3DLPPolicyRequest.

        Unique name of a policy, max 30 characters. Cannot be empty. All the leading and trailing blank spaces are trimmed.   # noqa: E501

        :param name: The name of this V3DLPPolicyRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def scopes(self):
        """Gets the scopes of this V3DLPPolicyRequest.  # noqa: E501

        List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations). You can apply both scopes if you set it to [\"Internal\", \"External\"].   # noqa: E501

        :return: The scopes of this V3DLPPolicyRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this V3DLPPolicyRequest.

        List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations). You can apply both scopes if you set it to [\"Internal\", \"External\"].   # noqa: E501

        :param scopes: The scopes of this V3DLPPolicyRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and scopes is None:  # noqa: E501
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    @property
    def applies_to(self):
        """Gets the applies_to of this V3DLPPolicyRequest.  # noqa: E501


        :return: The applies_to of this V3DLPPolicyRequest.  # noqa: E501
        :rtype: list[V3DLPPolicyAppliesTo]
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this V3DLPPolicyRequest.


        :param applies_to: The applies_to of this V3DLPPolicyRequest.  # noqa: E501
        :type: list[V3DLPPolicyAppliesTo]
        """
        if self.local_vars_configuration.client_side_validation and applies_to is None:  # noqa: E501
            raise ValueError("Invalid value for `applies_to`, must not be `None`")  # noqa: E501

        self._applies_to = applies_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3DLPPolicyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3DLPPolicyRequest):
            return True

        return self.to_dict() != other.to_dict()

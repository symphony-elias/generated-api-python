# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class BaseSignal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'query': 'str',
        'visible_on_profile': 'bool',
        'company_wide': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'query': 'query',
        'visible_on_profile': 'visibleOnProfile',
        'company_wide': 'companyWide'
    }

    def __init__(self, name=None, query=None, visible_on_profile=None, company_wide=None, local_vars_configuration=None):  # noqa: E501
        """BaseSignal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._query = None
        self._visible_on_profile = None
        self._company_wide = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if query is not None:
            self.query = query
        if visible_on_profile is not None:
            self.visible_on_profile = visible_on_profile
        if company_wide is not None:
            self.company_wide = company_wide

    @property
    def name(self):
        """Gets the name of this BaseSignal.  # noqa: E501

        Signal name  # noqa: E501

        :return: The name of this BaseSignal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseSignal.

        Signal name  # noqa: E501

        :param name: The name of this BaseSignal.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def query(self):
        """Gets the query of this BaseSignal.  # noqa: E501

        The query used to define this signal. The query is defined as \"field:value\" pairs combined by the operators \"AND\" or \"OR\". Supported fields are (case-insensitive): \"author\", \"hashtag\" and \"cashtag\". MUST contain at least one \"hashtag\" or \"cashtag\" definition.   # noqa: E501

        :return: The query of this BaseSignal.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this BaseSignal.

        The query used to define this signal. The query is defined as \"field:value\" pairs combined by the operators \"AND\" or \"OR\". Supported fields are (case-insensitive): \"author\", \"hashtag\" and \"cashtag\". MUST contain at least one \"hashtag\" or \"cashtag\" definition.   # noqa: E501

        :param query: The query of this BaseSignal.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def visible_on_profile(self):
        """Gets the visible_on_profile of this BaseSignal.  # noqa: E501

        Whether the signal is visible on its creator's profile  # noqa: E501

        :return: The visible_on_profile of this BaseSignal.  # noqa: E501
        :rtype: bool
        """
        return self._visible_on_profile

    @visible_on_profile.setter
    def visible_on_profile(self, visible_on_profile):
        """Sets the visible_on_profile of this BaseSignal.

        Whether the signal is visible on its creator's profile  # noqa: E501

        :param visible_on_profile: The visible_on_profile of this BaseSignal.  # noqa: E501
        :type: bool
        """

        self._visible_on_profile = visible_on_profile

    @property
    def company_wide(self):
        """Gets the company_wide of this BaseSignal.  # noqa: E501

        Whether the signal is a push signal  # noqa: E501

        :return: The company_wide of this BaseSignal.  # noqa: E501
        :rtype: bool
        """
        return self._company_wide

    @company_wide.setter
    def company_wide(self, company_wide):
        """Sets the company_wide of this BaseSignal.

        Whether the signal is a push signal  # noqa: E501

        :param company_wide: The company_wide of this BaseSignal.  # noqa: E501
        :type: bool
        """

        self._company_wide = company_wide

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSignal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseSignal):
            return True

        return self.to_dict() != other.to_dict()

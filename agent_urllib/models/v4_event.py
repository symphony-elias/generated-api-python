# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agent_urllib.configuration import Configuration


class V4Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'message_id': 'str',
        'timestamp': 'int',
        'type': 'str',
        'diagnostic': 'str',
        'initiator': 'V4Initiator',
        'payload': 'V4Payload'
    }

    attribute_map = {
        'id': 'id',
        'message_id': 'messageId',
        'timestamp': 'timestamp',
        'type': 'type',
        'diagnostic': 'diagnostic',
        'initiator': 'initiator',
        'payload': 'payload'
    }

    def __init__(self, id=None, message_id=None, timestamp=None, type=None, diagnostic=None, initiator=None, payload=None, local_vars_configuration=None):  # noqa: E501
        """V4Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._message_id = None
        self._timestamp = None
        self._type = None
        self._diagnostic = None
        self._initiator = None
        self._payload = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if message_id is not None:
            self.message_id = message_id
        if timestamp is not None:
            self.timestamp = timestamp
        if type is not None:
            self.type = type
        if diagnostic is not None:
            self.diagnostic = diagnostic
        if initiator is not None:
            self.initiator = initiator
        if payload is not None:
            self.payload = payload

    @property
    def id(self):
        """Gets the id of this V4Event.  # noqa: E501

        Event ID  # noqa: E501

        :return: The id of this V4Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V4Event.

        Event ID  # noqa: E501

        :param id: The id of this V4Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_id(self):
        """Gets the message_id of this V4Event.  # noqa: E501

        Message ID  # noqa: E501

        :return: The message_id of this V4Event.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this V4Event.

        Message ID  # noqa: E501

        :param message_id: The message_id of this V4Event.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def timestamp(self):
        """Gets the timestamp of this V4Event.  # noqa: E501

        Timestamp of event  # noqa: E501

        :return: The timestamp of this V4Event.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this V4Event.

        Timestamp of event  # noqa: E501

        :param timestamp: The timestamp of this V4Event.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this V4Event.  # noqa: E501

        Event type, possible events are:   - MESSAGESENT   - SHAREDPOST   - INSTANTMESSAGECREATED   - ROOMCREATED   - ROOMUPDATED   - ROOMDEACTIVATED   - ROOMREACTIVATED   - USERJOINEDROOM   - USERLEFTROOM   - ROOMMEMBERPROMOTEDTOOWNER   - ROOMMEMBERDEMOTEDFROMOWNER   - CONNECTIONREQUESTED   - CONNECTIONACCEPTED   - MESSAGESUPPRESSED   - SYMPHONYELEMENTSACTION   - USERREQUESTEDTOJOINROOM   # noqa: E501

        :return: The type of this V4Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V4Event.

        Event type, possible events are:   - MESSAGESENT   - SHAREDPOST   - INSTANTMESSAGECREATED   - ROOMCREATED   - ROOMUPDATED   - ROOMDEACTIVATED   - ROOMREACTIVATED   - USERJOINEDROOM   - USERLEFTROOM   - ROOMMEMBERPROMOTEDTOOWNER   - ROOMMEMBERDEMOTEDFROMOWNER   - CONNECTIONREQUESTED   - CONNECTIONACCEPTED   - MESSAGESUPPRESSED   - SYMPHONYELEMENTSACTION   - USERREQUESTEDTOJOINROOM   # noqa: E501

        :param type: The type of this V4Event.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def diagnostic(self):
        """Gets the diagnostic of this V4Event.  # noqa: E501

        Details if event failed to parse for any reason.  The contents of this field may not be useful, depending on the nature of the error. Only present when error occurs.   # noqa: E501

        :return: The diagnostic of this V4Event.  # noqa: E501
        :rtype: str
        """
        return self._diagnostic

    @diagnostic.setter
    def diagnostic(self, diagnostic):
        """Sets the diagnostic of this V4Event.

        Details if event failed to parse for any reason.  The contents of this field may not be useful, depending on the nature of the error. Only present when error occurs.   # noqa: E501

        :param diagnostic: The diagnostic of this V4Event.  # noqa: E501
        :type: str
        """

        self._diagnostic = diagnostic

    @property
    def initiator(self):
        """Gets the initiator of this V4Event.  # noqa: E501


        :return: The initiator of this V4Event.  # noqa: E501
        :rtype: V4Initiator
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this V4Event.


        :param initiator: The initiator of this V4Event.  # noqa: E501
        :type: V4Initiator
        """

        self._initiator = initiator

    @property
    def payload(self):
        """Gets the payload of this V4Event.  # noqa: E501


        :return: The payload of this V4Event.  # noqa: E501
        :rtype: V4Payload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this V4Event.


        :param payload: The payload of this V4Event.  # noqa: E501
        :type: V4Payload
        """

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V4Event):
            return True

        return self.to_dict() != other.to_dict()

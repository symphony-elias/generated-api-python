# coding: utf-8

"""
    Agent API

    This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://rest-api.symphony.com/docs/messagemlv2 - **Real Time Events**: The following events are returned when reading from a real time messages and events stream (\"datafeed\"). These events will be returned for datafeeds created with the v5 endpoints. To know more about the endpoints, refer to Create Messages/Events Stream and Read Messages/Events Stream. Unless otherwise specified, all events were added in 1.46.   # noqa: E501

    The version of the OpenAPI document: 20.10.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V3DLPPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'policy_id': 'str',
        'version': 'str',
        'name': 'str',
        'creator_id': 'int',
        'scopes': 'list[str]',
        'applies_to': 'list[V3DLPPolicyAppliesTo]',
        'active': 'bool',
        'deleted': 'bool',
        'creation_date': 'int',
        'last_updated_date': 'int',
        'last_disabled_date': 'int',
        'system_policy': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'policy_id': 'policyId',
        'version': 'version',
        'name': 'name',
        'creator_id': 'creatorId',
        'scopes': 'scopes',
        'applies_to': 'appliesTo',
        'active': 'active',
        'deleted': 'deleted',
        'creation_date': 'creationDate',
        'last_updated_date': 'lastUpdatedDate',
        'last_disabled_date': 'lastDisabledDate',
        'system_policy': 'systemPolicy'
    }

    def __init__(self, id=None, policy_id=None, version=None, name=None, creator_id=None, scopes=None, applies_to=None, active=None, deleted=None, creation_date=None, last_updated_date=None, last_disabled_date=None, system_policy=None, local_vars_configuration=None):  # noqa: E501
        """V3DLPPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._policy_id = None
        self._version = None
        self._name = None
        self._creator_id = None
        self._scopes = None
        self._applies_to = None
        self._active = None
        self._deleted = None
        self._creation_date = None
        self._last_updated_date = None
        self._last_disabled_date = None
        self._system_policy = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if policy_id is not None:
            self.policy_id = policy_id
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if creator_id is not None:
            self.creator_id = creator_id
        if scopes is not None:
            self.scopes = scopes
        if applies_to is not None:
            self.applies_to = applies_to
        if active is not None:
            self.active = active
        if deleted is not None:
            self.deleted = deleted
        if creation_date is not None:
            self.creation_date = creation_date
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if last_disabled_date is not None:
            self.last_disabled_date = last_disabled_date
        if system_policy is not None:
            self.system_policy = system_policy

    @property
    def id(self):
        """Gets the id of this V3DLPPolicy.  # noqa: E501

        Unique identifier for policy.  # noqa: E501

        :return: The id of this V3DLPPolicy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V3DLPPolicy.

        Unique identifier for policy.  # noqa: E501

        :param id: The id of this V3DLPPolicy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def policy_id(self):
        """Gets the policy_id of this V3DLPPolicy.  # noqa: E501

        Policy Id.  # noqa: E501

        :return: The policy_id of this V3DLPPolicy.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this V3DLPPolicy.

        Policy Id.  # noqa: E501

        :param policy_id: The policy_id of this V3DLPPolicy.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    @property
    def version(self):
        """Gets the version of this V3DLPPolicy.  # noqa: E501

        The version of the policy, in format \"major.minor\". Initial value will set by backend as \"3.0\" when created. Whenever the policy version needs to be changed, the minor version by 1 unless minor == 999, then the major version is increased by 1 until it reaches 999.   # noqa: E501

        :return: The version of this V3DLPPolicy.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V3DLPPolicy.

        The version of the policy, in format \"major.minor\". Initial value will set by backend as \"3.0\" when created. Whenever the policy version needs to be changed, the minor version by 1 unless minor == 999, then the major version is increased by 1 until it reaches 999.   # noqa: E501

        :param version: The version of this V3DLPPolicy.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this V3DLPPolicy.  # noqa: E501

        Unique name of policy, max 30 characters. Cannot be empty. All the leading and trailing blank spaces are trimmed.   # noqa: E501

        :return: The name of this V3DLPPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V3DLPPolicy.

        Unique name of policy, max 30 characters. Cannot be empty. All the leading and trailing blank spaces are trimmed.   # noqa: E501

        :param name: The name of this V3DLPPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creator_id(self):
        """Gets the creator_id of this V3DLPPolicy.  # noqa: E501

        Numeric userId of the creator.  # noqa: E501

        :return: The creator_id of this V3DLPPolicy.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this V3DLPPolicy.

        Numeric userId of the creator.  # noqa: E501

        :param creator_id: The creator_id of this V3DLPPolicy.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def scopes(self):
        """Gets the scopes of this V3DLPPolicy.  # noqa: E501

        List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations). You can apply both scopes if you set it to [\"Internal\", \"External\"].   # noqa: E501

        :return: The scopes of this V3DLPPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this V3DLPPolicy.

        List of communication scopes. Possible values are \"Internal\" (for Internal conversations) or \"External\" (for External conversations). You can apply both scopes if you set it to [\"Internal\", \"External\"].   # noqa: E501

        :param scopes: The scopes of this V3DLPPolicy.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def applies_to(self):
        """Gets the applies_to of this V3DLPPolicy.  # noqa: E501


        :return: The applies_to of this V3DLPPolicy.  # noqa: E501
        :rtype: list[V3DLPPolicyAppliesTo]
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this V3DLPPolicy.


        :param applies_to: The applies_to of this V3DLPPolicy.  # noqa: E501
        :type: list[V3DLPPolicyAppliesTo]
        """

        self._applies_to = applies_to

    @property
    def active(self):
        """Gets the active of this V3DLPPolicy.  # noqa: E501

        Indicate whether the policy is active or not.  # noqa: E501

        :return: The active of this V3DLPPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this V3DLPPolicy.

        Indicate whether the policy is active or not.  # noqa: E501

        :param active: The active of this V3DLPPolicy.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def deleted(self):
        """Gets the deleted of this V3DLPPolicy.  # noqa: E501

        Indicate whether the policy is deleted or not.  # noqa: E501

        :return: The deleted of this V3DLPPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this V3DLPPolicy.

        Indicate whether the policy is deleted or not.  # noqa: E501

        :param deleted: The deleted of this V3DLPPolicy.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def creation_date(self):
        """Gets the creation_date of this V3DLPPolicy.  # noqa: E501

        Creation time of the policy in milliseconds elapsed as of epoch time.   # noqa: E501

        :return: The creation_date of this V3DLPPolicy.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this V3DLPPolicy.

        Creation time of the policy in milliseconds elapsed as of epoch time.   # noqa: E501

        :param creation_date: The creation_date of this V3DLPPolicy.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this V3DLPPolicy.  # noqa: E501

        Recent update time of the policy in milliseconds elapsed as of epoch. time.   # noqa: E501

        :return: The last_updated_date of this V3DLPPolicy.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this V3DLPPolicy.

        Recent update time of the policy in milliseconds elapsed as of epoch. time.   # noqa: E501

        :param last_updated_date: The last_updated_date of this V3DLPPolicy.  # noqa: E501
        :type: int
        """

        self._last_updated_date = last_updated_date

    @property
    def last_disabled_date(self):
        """Gets the last_disabled_date of this V3DLPPolicy.  # noqa: E501

        Recent disable time of the policy in milliseconds elapsed as of epoch. time.   # noqa: E501

        :return: The last_disabled_date of this V3DLPPolicy.  # noqa: E501
        :rtype: int
        """
        return self._last_disabled_date

    @last_disabled_date.setter
    def last_disabled_date(self, last_disabled_date):
        """Sets the last_disabled_date of this V3DLPPolicy.

        Recent disable time of the policy in milliseconds elapsed as of epoch. time.   # noqa: E501

        :param last_disabled_date: The last_disabled_date of this V3DLPPolicy.  # noqa: E501
        :type: int
        """

        self._last_disabled_date = last_disabled_date

    @property
    def system_policy(self):
        """Gets the system_policy of this V3DLPPolicy.  # noqa: E501


        :return: The system_policy of this V3DLPPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._system_policy

    @system_policy.setter
    def system_policy(self, system_policy):
        """Sets the system_policy of this V3DLPPolicy.


        :param system_policy: The system_policy of this V3DLPPolicy.  # noqa: E501
        :type: bool
        """

        self._system_policy = system_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V3DLPPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V3DLPPolicy):
            return True

        return self.to_dict() != other.to_dict()
